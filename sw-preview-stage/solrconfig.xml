<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--
     For more details about configurations options that may appear in
     this file, see http://wiki.apache.org/solr/SolrConfigXml.
-->
<config>
  <!-- In all configuration below, a prefix of "solr." for class names
       is an alias that causes solr to search appropriate packages,
       including org.apache.solr.(search|update|request|core|analysis)

       You may also specify a fully qualified Java classname if you
       have your own custom plugins.
    -->

  <!-- Controls what version of Lucene various components of Solr
       adhere to.  Generally, you want to use the latest version to
       get all bug fixes and improvements. It is highly recommended
       that you fully re-index after changing this setting as it can
       affect both how text is indexed and queried.
  -->
  <luceneMatchVersion>6.1.0</luceneMatchVersion>

  <!-- <lib/> directives can be used to instruct Solr to load any Jars
       identified and use them to resolve any "plugins" specified in
       your solrconfig.xml or schema.xml (ie: Analyzers, Request
       Handlers, etc...).

       All directories and paths are resolved relative to the
       instanceDir.

       Please note that <lib/> directives are processed in the order
       that they appear in your solrconfig.xml file, and are "stacked"
       on top of each other when building a ClassLoader - so if you have
       plugin jars with dependencies on other jars, the "lower level"
       dependency jars should be loaded first.

       If a "./lib" directory exists in your instanceDir, all files
       found in it are included as if you had used the following
       syntax...

              <lib dir="./lib" />
    -->

  <!-- A 'dir' option by itself adds any files found in the directory
       to the classpath, this is useful for including all jars in a
       directory.

       When a 'regex' is specified in addition to a 'dir', only the
       files in that directory which completely match the regex
       (anchored on both ends) will be included.

       If a 'dir' option (with or without a regex) is used and nothing
       is found that matches, a warning will be logged.

       The examples below can be used to load some solr-contribs along
       with their external dependencies.
    -->
  <lib dir="${solr.install.dir:../../../..}/contrib/extraction/lib" regex=".*\.jar" />
  <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-cell-\d.*\.jar" />

  <lib dir="${solr.install.dir:../../../..}/contrib/clustering/lib/" regex=".*\.jar" />
  <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-clustering-\d.*\.jar" />

  <lib dir="${solr.install.dir:../../../..}/contrib/langid/lib/" regex=".*\.jar" />
  <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-langid-\d.*\.jar" />

  <lib dir="${solr.install.dir:../../../..}/contrib/velocity/lib" regex=".*\.jar" />
  <!-- browse-resources must come before solr-velocity JAR in order to override localized resources -->
  <lib path="${solr.install.dir:../../../..}/example/files/browse-resources"/>
  <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-velocity-\d.*\.jar" />
  <!-- an exact 'path' can be used instead of a 'dir' to specify a
       specific jar file.  This will cause a serious error to be logged
       if it can't be loaded.
    -->
  <!--
     <lib path="../a-jar-that-does-not-exist.jar" />
  -->

  <!-- Data Directory

       Used to specify an alternate directory to hold all index data
       other than the default ./data under the Solr home.  If
       replication is in use, this should match the replication
       configuration.
    -->
  <dataDir>${solr.data.dir:/data/solr}</dataDir>


  <!-- The DirectoryFactory to use for indexes.

       solr.StandardDirectoryFactory is filesystem
       based and tries to pick the best implementation for the current
       JVM and platform.  solr.NRTCachingDirectoryFactory, the default,
       wraps solr.StandardDirectoryFactory and caches small files in memory
       for better NRT performance.

       One can force a particular implementation via solr.MMapDirectoryFactory,
       solr.NIOFSDirectoryFactory, or solr.SimpleFSDirectoryFactory.

       solr.RAMDirectoryFactory is memory based, not
       persistent, and doesn't work with replication.
    -->
  <directoryFactory name="DirectoryFactory"
                    class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}"/>

  <!-- The CodecFactory for defining the format of the inverted index.
       The default implementation is SchemaCodecFactory, which is the official Lucene
       index format, but hooks into the schema to provide per-field customization of
       the postings lists and per-document values in the fieldType element
       (postingsFormat/docValuesFormat). Note that most of the alternative implementations
       are experimental, so if you choose to customize the index format, it's a good
       idea to convert back to the official format e.g. via IndexWriter.addIndexes(IndexReader)
       before upgrading to a newer version to avoid unnecessary reindexing.
  -->
  <codecFactory class="solr.SchemaCodecFactory"/>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       Index Config - These settings control low-level behavior of indexing
       Most example settings here show the default value, but are commented
       out, to more easily see where customizations have been made.

       Note: This replaces <indexDefaults> and <mainIndex> from older versions
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <indexConfig>
    <!-- maxFieldLength was removed in 4.0. To get similar behavior, include a
         LimitTokenCountFilterFactory in your fieldType definition. E.g.
     <filter class="solr.LimitTokenCountFilterFactory" maxTokenCount="10000"/>
    -->
    <filter class="solr.LimitTokenCountFilterFactory" maxTokenCount="30000"/>

    <!-- Maximum time to wait for a write lock (ms) for an IndexWriter. Default: 1000 -->
    <!-- <writeLockTimeout>1000</writeLockTimeout>  -->
    <writeLockTimeout>1000</writeLockTimeout>

    <!-- Expert: Enabling compound file will use less files for the index,
         using fewer file descriptors on the expense of performance decrease.
         Default in Lucene is "true". Default in Solr is "false" (since 3.6) -->
    <!-- <useCompoundFile>false</useCompoundFile> -->
    <useCompoundFile>false</useCompoundFile>

    <!-- ramBufferSizeMB sets the amount of RAM that may be used by Lucene
         indexing for buffering added documents and deletions before they are
         flushed to the Directory.
         maxBufferedDocs sets a limit on the number of documents buffered
         before flushing.
         If both ramBufferSizeMB and maxBufferedDocs is set, then
         Lucene will flush based on whichever limit is hit first.  -->
    <!-- <ramBufferSizeMB>100</ramBufferSizeMB> -->
    <!-- <maxBufferedDocs>1000</maxBufferedDocs> -->
    <ramBufferSizeMB>128</ramBufferSizeMB>

    <!-- Expert: Merge Policy
         The Merge Policy in Lucene controls how merging of segments is done.
         The default since Solr/Lucene 3.3 is TieredMergePolicy.
         The default since Lucene 2.3 was the LogByteSizeMergePolicy,
         Even older versions of Lucene used LogDocMergePolicy.
      -->
    <!--
        <mergePolicyFactory class="solr.TieredMergePolicyFactory">
          <int name="maxMergeAtOnce">10</int>
          <int name="segmentsPerTier">10</int>
        </mergePolicyFactory>
     -->
     <mergePolicyFactory class="solr.TieredMergePolicyFactory">
       <int name="maxMergeAtOnce">10</int>
       <int name="segmentsPerTier">10</int>
     </mergePolicyFactory>

    <!-- Expert: Merge Scheduler
         The Merge Scheduler in Lucene controls how merges are
         performed.  The ConcurrentMergeScheduler (Lucene 2.3 default)
         can perform merges in the background using separate threads.
         The SerialMergeScheduler (Lucene 2.2 default) does not.
     -->
    <!--
       <mergeScheduler class="org.apache.lucene.index.ConcurrentMergeScheduler"/>
       -->

    <!-- LockFactory

         This option specifies which Lucene LockFactory implementation
         to use.

         single = SingleInstanceLockFactory - suggested for a
                  read-only index or when there is no possibility of
                  another process trying to modify the index.
         native = NativeFSLockFactory - uses OS native file locking.
                  Do not use when multiple solr webapps in the same
                  JVM are attempting to share a single index.
         simple = SimpleFSLockFactory  - uses a plain file for locking

         Defaults: 'native' is default for Solr3.6 and later, otherwise
                   'simple' is the default

         More details on the nuances of each LockFactory...
         http://wiki.apache.org/lucene-java/AvailableLockFactories
         <lockType>${solr.lock.type:native}</lockType>
    -->
    <lockType>simple</lockType>

    <!-- Commit Deletion Policy
         Custom deletion policies can be specified here. The class must
         implement org.apache.lucene.index.IndexDeletionPolicy.

         The default Solr IndexDeletionPolicy implementation supports
         deleting index commit points on number of commits, age of
         commit point and optimized status.

         The latest commit point should always be preserved regardless
         of the criteria.
    -->
    <!--
    <deletionPolicy class="solr.SolrDeletionPolicy">
    -->
    <!-- The number of commit points to be kept -->
    <!-- <str name="maxCommitsToKeep">1</str> -->
    <!-- The number of optimized commit points to be kept -->
    <!-- <str name="maxOptimizedCommitsToKeep">0</str> -->
    <!--
        Delete all commit points once they have reached the given age.
        Supports DateMathParser syntax e.g.
      -->
    <!--
       <str name="maxCommitAge">30MINUTES</str>
       <str name="maxCommitAge">1DAY</str>
    -->
    <!--
    </deletionPolicy>
    -->
    <deletionPolicy class="solr.SolrDeletionPolicy">
      <str name="maxCommitsToKeep">1</str>
      <str name="maxOptimizedCommitsToKeep">0</str>
    </deletionPolicy>


    <!-- Lucene Infostream

         To aid in advanced debugging, Lucene provides an "InfoStream"
         of detailed information when indexing.

         Setting The value to true will instruct the underlying Lucene
         IndexWriter to write its debugging info the specified file
      -->
    <!-- <infoStream file="INFOSTREAM.txt">false</infoStream> -->
  </indexConfig>


  <!-- JMX

       This example enables JMX if and only if an existing MBeanServer
       is found, use this if you want to configure JMX through JVM
       parameters. Remove this to disable exposing Solr configuration
       and statistics to JMX.

       For more details see http://wiki.apache.org/solr/SolrJmx
    -->
  <jmx />
  <!-- If you want to connect to a particular server, specify the
       agentId
    -->
  <!-- <jmx agentId="myAgent" /> -->
  <!-- If you want to start a new MBeanServer, specify the serviceUrl -->
  <!-- <jmx serviceUrl="service:jmx:rmi:///jndi/rmi://localhost:9999/solr"/>
    -->

  <!-- The default high-performance update handler -->
  <updateHandler class="solr.DirectUpdateHandler2">

    <!-- Enables a transaction log, used for real-time get, durability, and
         and solr cloud replica recovery.  The log can grow as big as
         uncommitted changes to the index, so use of a hard autoCommit
         is recommended (see below).
         "dir" - the target directory for transaction logs, defaults to the
                solr data directory.  -->
    <updateLog>
      <str name="dir">/data/solr/logs</str>
    </updateLog>

    <!-- AutoCommit

         Perform a hard commit automatically under certain conditions.
         Instead of enabling autoCommit, consider using "commitWithin"
         when adding documents.

         http://wiki.apache.org/solr/UpdateXmlMessages

         maxDocs - Maximum number of documents to add since the last
                   commit before automatically triggering a new commit.

         maxTime - Maximum amount of time in ms that is allowed to pass
                   since a document was added before automatically
                   triggering a new commit.
         openSearcher - if false, the commit causes recent index changes
           to be flushed to stable storage, but does not cause a new
           searcher to be opened to make those changes visible.

         If the updateLog is enabled, then it's highly recommended to
         have some sort of hard autoCommit to limit the log size.
    <autoCommit>
      <maxTime>15000</maxTime>
      <openSearcher>false</openSearcher>
    </autoCommit>
  -->
    <autoCommit>
       <maxDocs>20000</maxDocs>
       <openSearcher>false</openSearcher>
    </autoCommit>

    <!-- softAutoCommit is like autoCommit except it causes a
         'soft' commit which only ensures that changes are visible
         but does not ensure that data is synced to disk.  This is
         faster and more near-realtime friendly than a hard commit.
      -->
    <!--
      <autoSoftCommit>
        <maxTime>1000</maxTime>
      </autoSoftCommit>
     -->

    <!-- Update Related Event Listeners

         Various IndexWriter related events can trigger Listeners to
         take actions.

         postCommit - fired after every commit or optimize command
         postOptimize - fired after every optimize command
      -->
    <!-- The RunExecutableListener executes an external command from a
         hook such as postCommit or postOptimize.

         exe - the name of the executable to run
         dir - dir to use as the current working directory. (default=".")
         wait - the calling thread waits until the executable returns.
                (default="true")
         args - the arguments to pass to the program.  (default is none)
         env - environment variables to set.  (default is none)
      -->
    <!-- This example shows how RunExecutableListener could be used
         with the script based replication...
         http://wiki.apache.org/solr/CollectionDistribution
      -->
    <!--
       <listener event="postCommit" class="solr.RunExecutableListener">
         <str name="exe">solr/bin/snapshooter</str>
         <str name="dir">.</str>
         <bool name="wait">true</bool>
         <arr name="args"> <str>arg1</str> <str>arg2</str> </arr>
         <arr name="env"> <str>MYVAR=val1</str> </arr>
       </listener>
      -->

  </updateHandler>

  <!-- IndexReaderFactory

       Use the following format to specify a custom IndexReaderFactory,
       which allows for alternate IndexReader implementations.

       ** Experimental Feature **

       Please note - Using a custom IndexReaderFactory may prevent
       certain other features from working. The API to
       IndexReaderFactory may change without warning or may even be
       removed from future releases if the problems cannot be
       resolved.


       ** Features that may not work with custom IndexReaderFactory **

       The ReplicationHandler assumes a disk-resident index. Using a
       custom IndexReader implementation may cause incompatibility
       with ReplicationHandler and may cause replication to not work
       correctly. See SOLR-1366 for details.

    -->
  <!--
  <indexReaderFactory name="IndexReaderFactory" class="package.class">
    <str name="someArg">Some Value</str>
  </indexReaderFactory >
  -->

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       Query section - these settings control query time things like caches
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <query>
    <!-- Max Boolean Clauses

         Maximum number of clauses in each BooleanQuery,  an exception
         is thrown if exceeded.

         ** WARNING **

         This option actually modifies a global Lucene property that
         will affect all SolrCores.  If multiple solrconfig.xml files
         disagree on this property, the value at any given moment will
         be based on the last SolrCore to be initialized.

      -->
    <maxBooleanClauses>1024</maxBooleanClauses>


    <!-- Solr Internal Query Caches

         There are two implementations of cache available for Solr,
         LRUCache, based on a synchronized LinkedHashMap, and
         FastLRUCache, based on a ConcurrentHashMap.

         FastLRUCache has faster gets and slower puts in single
         threaded operation and thus is generally faster than LRUCache
         when the hit ratio of the cache is high (> 75%), and may be
         faster under other scenarios on multi-cpu systems.
    -->

    <!-- Filter Cache

         Cache used by SolrIndexSearcher for filters (DocSets),
         unordered sets of *all* documents that match a query.  When a
         new searcher is opened, its caches may be prepopulated or
         "autowarmed" using data from caches in the old searcher.
         autowarmCount is the number of items to prepopulate.  For
         LRUCache, the autowarmed items will be the most recently
         accessed items.

         Parameters:
           class - the SolrCache implementation LRUCache or
               (LRUCache or FastLRUCache)
           size - the maximum number of entries in the cache
           initialSize - the initial capacity (number of entries) of
               the cache.  (see java.util.HashMap)
           autowarmCount - the number of entries to prepopulate from
               and old cache.
    <filterCache class="solr.FastLRUCache"
                 size="512"
                 initialSize="512"
                 autowarmCount="0"/>
               -->
    <filterCache class="solr.FastLRUCache"
                 size="50000"
                 initialSize="12500"
                 autowarmCount="48"
                 cleanupThread="true"/>

    <!-- Query Result Cache

         Caches results of searches - ordered lists of document ids
         (DocList) based on a query, a sort, and the range of documents requested.
         Additional supported parameter by LRUCache:
            maxRamMB - the maximum amount of RAM (in MB) that this cache is allowed
                       to occupy
    <queryResultCache class="solr.LRUCache"
                      size="512"
                      initialSize="512"
                      autowarmCount="0"/>
                    -->
    <queryResultCache class="solr.LRUCache"
                      size="102400"
                      initialSize="8192"
                      autowarmCount="1024"/>

    <!-- Document Cache

         Caches Lucene Document objects (the stored fields for each
         document).  Since Lucene internal document ids are transient,
         this cache will not be autowarmed.
    <documentCache class="solr.LRUCache"
                   size="512"
                   initialSize="512"
                   autowarmCount="0"/>
                 -->
    <documentCache class="solr.LRUCache"
                   size="40960"
                   initialSize="8192"
                   autowarmCount="0"/>

    <!-- Field Value Cache

         Cache used to hold field values that are quickly accessible
         by document id.  The fieldValueCache is created by default
         even if not configured here.
      -->
    <!--
       <fieldValueCache class="solr.FastLRUCache"
                        size="512"
                        autowarmCount="128"
                        showItems="32" />
      -->
      <fieldValueCache class="solr.FastLRUCache"
                       size="25"
                       initialSize="25"
                       autowarmCount="0"
                       showItems="64"/>

    <!-- Custom Cache

         Example of a generic cache.  These caches may be accessed by
         name through SolrIndexSearcher.getCache(),cacheLookup(), and
         cacheInsert().  The purpose is to enable easy caching of
         user/application level data.  The regenerator argument should
         be specified as an implementation of solr.CacheRegenerator
         if autowarming is desired.
      -->
    <!--
       <cache name="myUserCache"
              class="solr.LRUCache"
              size="4096"
              initialSize="1024"
              autowarmCount="1024"
              regenerator="com.mycompany.MyRegenerator"
              />
      -->


    <!-- Lazy Field Loading

         If true, stored fields that are not requested will be loaded
         lazily.  This can result in a significant speed improvement
         if the usual case is to not load all stored fields,
         especially if the skipped fields are large compressed text
         fields.
    -->
    <enableLazyFieldLoading>true</enableLazyFieldLoading>

    <!-- Use Filter For Sorted Query

         A possible optimization that attempts to use a filter to
         satisfy a search.  If the requested sort does not include
         score, then the filterCache will be checked for a filter
         matching the query. If found, the filter will be used as the
         source of document ids, and then the sort will be applied to
         that.

         For most situations, this will not be useful unless you
         frequently get the same search repeatedly with different sort
         options, and none of them ever use "score"
      -->
    <!--
       <useFilterForSortedQuery>true</useFilterForSortedQuery>
      -->
      <useFilterForSortedQuery>true</useFilterForSortedQuery>


    <!-- Result Window Size

         An optimization for use with the queryResultCache.  When a search
         is requested, a superset of the requested number of document ids
         are collected.  For example, if a search for a particular query
         requests matching documents 10 through 19, and queryWindowSize is 50,
         then documents 0 through 49 will be collected and cached.  Any further
         requests in that range can be satisfied via the cache.
    <queryResultWindowSize>20</queryResultWindowSize>
  -->
    <queryResultWindowSize>80</queryResultWindowSize>


    <!-- Maximum number of documents to cache for any entry in the
         queryResultCache.
    <queryResultMaxDocsCached>200</queryResultMaxDocsCached>
  -->
    <queryResultMaxDocsCached>100</queryResultMaxDocsCached>

    <!-- Query Related Event Listeners

         Various IndexSearcher related events can trigger Listeners to
         take actions.

         newSearcher - fired whenever a new searcher is being prepared
         and there is a current searcher handling requests (aka
         registered).  It can be used to prime certain caches to
         prevent long request times for certain requests.

         firstSearcher - fired whenever a new searcher is being
         prepared but there is no current registered searcher to handle
         requests or to gain autowarming data from.


      -->
    <!-- QuerySenderListener takes an array of NamedList and executes a
         local query request for each NamedList in sequence.
      -->
    <listener event="newSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
        <!--
           <lst><str name="q">solr</str><str name="sort">price asc</str></lst>
           <lst><str name="q">rocks</str><str name="sort">weight asc</str></lst>
          -->
      </arr>
    </listener>
    <listener event="firstSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
        <!--
        <lst>
          <str name="q">static firstSearcher warming in solrconfig.xml</str>
        </lst>
        -->
      </arr>
    </listener>

    <!-- Use Cold Searcher

         If a search request comes in and there is no current
         registered searcher, then immediately register the still
         warming searcher and use it.  If "false" then all requests
         will block until the first searcher is done warming.
    <useColdSearcher>false</useColdSearcher>
  -->
    <useColdSearcher>true</useColdSearcher>

    <!-- Max Warming Searchers

         Maximum number of searchers that may be warming in the
         background concurrently.  An error is returned if this limit
         is exceeded.

         Recommend values of 1-2 for read-only slaves, higher for
         masters w/o cache warming.
      -->
    <maxWarmingSearchers>2</maxWarmingSearchers>

    <!-- a newSearcher event is fired whenever a new searcher is being prepared
         and there is a current searcher handling requests (aka registered).
         It should only have the most common facets -->
    <listener event="newSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
        <!-- facets for default query for all objects -->
        <lst>
          <int name="rows">0</int>
          <str name="fl">score</str>
          <bool name="facet">true</bool>
          <int name="facet.mincount">1</int>
          <int name="facet.limit">30</int>
          <str name="facet.field">access_facet</str>
            <str name="f.access_facet.facet.method">enum</str>
          <str name="facet.field">author_person_facet</str>
          <str name="facet.field">author_other_facet</str>
          <str name="facet.field">building_facet</str>
            <str name="f.building_facet.facet.method">enum</str>
          <str name="facet.field">callnum_facet_hsim</str>
            <str name="f.callnum_facet_hsim.facet.sort">index</str>
            <str name="f.callnum_facet_hsim.facet.method">enum</str>
          <str name="facet.field">collection</str>
            <str name="f.collection.facet.method">enum</str>
          <str name="facet.field">db_az_subject</str>
            <str name="f.db_az_subject.facet.sort">index</str>
            <str name="f.db_az_subject.facet.method">enum</str>
          <!-- display_type can be removed after all DOR objects and MARC records are reindexed in Feb/March 2016 -->
          <str name="facet.field">display_type</str>
            <str name="f.display_type.facet.method">enum</str>
          <str name="facet.field">era_facet</str>
          <str name="facet.field">format_main_ssim</str>
            <str name="f.format_main_ssim.facet.method">enum</str>
            <str name="f.format_main_ssim.facet.method">enum</str>
          <str name="facet.field">format_physical_ssim</str>
            <str name="f.format_physical_ssim.facet.method">enum</str>
          <str name="facet.field">fund_facet</str>
          <str name="facet.field">genre_ssim</str>
            <str name="f.genre_ssim.facet.method">enum</str>
          <str name="facet.field">geographic_facet</str>
          <str name="facet.field">language</str>
          <str name="facet.field">location_facet</str>
          <str name="facet.field">pub_year_tisim</str>
          <str name="facet.field">topic_facet</str>
        </lst>
        <!-- single object query to populate filter and fieldValue cache -->
        <lst>
          <str name="q">id:666</str>
          <str name="qt">standard</str>
          <int name="rows">0</int>
          <str name="fl">score</str>
          <bool name="facet">true</bool>
          <int name="facet.mincount">1</int>
          <int name="facet.limit">30</int>
          <str name="facet.field">access_facet</str>
            <str name="f.access_facet.facet.method">enum</str>
          <str name="facet.field">author_person_facet</str>
          <str name="facet.field">author_other_facet</str>
          <str name="facet.field">building_facet</str>
            <str name="f.building_facet.facet.method">enum</str>
          <str name="facet.field">callnum_facet_hsim</str>
            <str name="f.callnum_facet_hsim.facet.sort">index</str>
            <str name="f.callnum_facet_hsim.facet.method">enum</str>
          <str name="facet.field">collection</str>
            <str name="f.collection.facet.method">enum</str>
          <str name="facet.field">db_az_subject</str>
            <str name="f.db_az_subject.facet.sort">index</str>
            <str name="f.db_az_subject.facet.method">enum</str>
          <!-- display_type can be removed after all DOR objects and MARC records are reindexed in Feb/March 2016 -->
          <str name="facet.field">display_type</str>
            <str name="f.display_type.facet.method">enum</str>
          <str name="facet.field">era_facet</str>
          <str name="facet.field">format_main_ssim</str>
            <str name="f.format_main_ssim.facet.method">enum</str>
          <str name="facet.field">format_physical_ssim</str>
            <str name="f.format_physical_ssim.facet.method">enum</str>
          <str name="facet.field">fund_facet</str>
          <str name="facet.field">genre_ssim</str>
            <str name="f.genre_ssim.facet.method">enum</str>
          <str name="facet.field">geographic_facet</str>
          <str name="facet.field">language</str>
          <str name="facet.field">location_facet</str>
          <str name="facet.field">pub_year_tisim</str>
          <str name="facet.field">topic_facet</str>
        </lst>
      </arr>
    </listener>

    <!-- a firstSearcher event is fired whenever a new searcher is being
         prepared but there is no current registered searcher to handle
         requests or to gain autowarming data from. ("fast warmup") -->
    <listener event="firstSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
        <!-- facets for default query for all objects (home page) -->
        <lst>
          <int name="rows">0</int>
          <str name="fl">score</str>
          <bool name="facet">true</bool>
          <int name="facet.mincount">1</int>
          <int name="facet.limit">30</int>
          <str name="facet.field">access_facet</str>
            <str name="f.access_facet.facet.method">enum</str>
          <str name="facet.field">building_facet</str>
            <str name="f.building_facet.facet.method">enum</str>
          <str name="facet.field">format_main_ssim</str>
            <str name="f.format_main_ssim.facet.method">enum</str>
          <str name="facet.field">language</str>
        </lst>
        <!-- single object query to populate filter and fieldValue cache -->
        <lst>
          <str name="q">id:666</str>
          <str name="qt">standard</str>
          <int name="rows">0</int>
          <str name="fl">score</str>
          <bool name="facet">true</bool>
          <int name="facet.mincount">1</int>
          <int name="facet.limit">30</int>
          <str name="facet.field">access_facet</str>
            <str name="f.access_facet.facet.method">enum</str>
          <str name="facet.field">building_facet</str>
            <str name="f.building_facet.facet.method">enum</str>
          <str name="facet.field">format_main_ssim</str>
            <str name="f.format_main_ssim.facet.method">enum</str>
          <str name="facet.field">language</str>
        </lst>
        <!-- should there be warming for different sorts? -->
      </arr>
    </listener>

  </query>


  <!-- Request Dispatcher

       This section contains instructions for how the SolrDispatchFilter
       should behave when processing requests for this SolrCore.

       handleSelect is a legacy option that affects the behavior of requests
       such as /select?qt=XXX

       handleSelect="true" will cause the SolrDispatchFilter to process
       the request and dispatch the query to a handler specified by the
       "qt" param, assuming "/select" isn't already registered.

       handleSelect="false" will cause the SolrDispatchFilter to
       ignore "/select" requests, resulting in a 404 unless a handler
       is explicitly registered with the name "/select"

       handleSelect="true" is not recommended for new users, but is the default
       for backwards compatibility
       <requestDispatcher handleSelect="false" >
    -->
    <!-- Request Parsing

         These settings indicate how Solr Requests may be parsed, and
         what restrictions may be placed on the ContentStreams from
         those requests

         enableRemoteStreaming - enables use of the stream.file
         and stream.url parameters for specifying remote streams.

         multipartUploadLimitInKB - specifies the max size (in KiB) of
         Multipart File Uploads that Solr will allow in a Request.

         formdataUploadLimitInKB - specifies the max size (in KiB) of
         form data (application/x-www-form-urlencoded) sent via
         POST. You can use POST to pass request parameters not
         fitting into the URL.

         addHttpRequestToContext - if set to true, it will instruct
         the requestParsers to include the original HttpServletRequest
         object in the context map of the SolrQueryRequest under the
         key "httpRequest". It will not be used by any of the existing
         Solr components, but may be useful when developing custom
         plugins.

         *** WARNING ***
         The settings below authorize Solr to fetch remote files, You
         should make sure your system has some authentication before
         using enableRemoteStreaming="true"

    <requestParsers enableRemoteStreaming="true"
                    multipartUploadLimitInKB="2048000"
                    formdataUploadLimitInKB="2048"
                    addHttpRequestToContext="false"/>
                  -->

    <!-- HTTP Caching

         Set HTTP caching related parameters (for proxy caches and clients).

         The options below instruct Solr not to output any HTTP Caching
         related headers
    <httpCaching never304="true" />
  -->
    <!-- If you include a <cacheControl> directive, it will be used to
         generate a Cache-Control header (as well as an Expires header
         if the value contains "max-age=")

         By default, no Cache-Control header is generated.

         You can use the <cacheControl> option even if you have set
         never304="true"
      -->
    <!--
       <httpCaching never304="true" >
         <cacheControl>max-age=30, public</cacheControl>
       </httpCaching>
      -->
    <!-- To enable Solr to respond with automatically generated HTTP
         Caching headers, and to response to Cache Validation requests
         correctly, set the value of never304="false"

         This will cause Solr to generate Last-Modified and ETag
         headers based on the properties of the Index.

         The following options can also be specified to affect the
         values of these headers...

         lastModFrom - the default value is "openTime" which means the
         Last-Modified value (and validation against If-Modified-Since
         requests) will all be relative to when the current Searcher
         was opened.  You can change it to lastModFrom="dirLastMod" if
         you want the value to exactly correspond to when the physical
         index was last modified.

         etagSeed="..." is an option you can change to force the ETag
         header (and validation against If-None-Match requests) to be
         different even if the index has not changed (ie: when making
         significant changes to your config file)

         (lastModifiedFrom and etagSeed are both ignored if you use
         the never304="true" option)
      -->
    <!--
       <httpCaching lastModifiedFrom="openTime"
                    etagSeed="Solr">
         <cacheControl>max-age=30, public</cacheControl>
       </httpCaching>
  </requestDispatcher>
-->
  <requestDispatcher handleSelect="true" >
    <!--Make sure your system has some authentication before enabling remote streaming!  -->
    <requestParsers enableRemoteStreaming="false" multipartUploadLimitInKB="2048000" addHttpRequestToContext="false"/>
    <httpCaching lastModifiedFrom="openTime" etagSeed="Solr" />
  </requestDispatcher>

  <!-- Request Handlers

       http://wiki.apache.org/solr/SolrRequestHandler

       Incoming queries will be dispatched to a specific handler by name
       based on the path specified in the request.

       Legacy behavior: If the request path uses "/select" but no Request
       Handler has that name, and if handleSelect="true" has been specified in
       the requestDispatcher, then the Request Handler is dispatched based on
       the qt parameter.  Handlers without a leading '/' are accessed this way
       like so: http://host/app/[core/]select?qt=name  If no qt is
       given, then the requestHandler that declares default="true" will be
       used or the one named "standard".

       If a Request Handler is declared with startup="lazy", then it will
       not be initialized until the first request that uses it.

    -->

    <!-- required by SolrCloud -->
    <requestHandler name="/replication" class="solr.ReplicationHandler" startup="lazy" />
    <requestHandler name="/get" class="solr.RealTimeGetHandler">
      <lst name="defaults">
        <str name="omitHeader">true</str>
      </lst>
    </requestHandler>

  <!-- SearchHandler

       http://wiki.apache.org/solr/SearchHandler

       For processing Search Queries, the primary Request Handler
       provided with Solr is "SearchHandler" It delegates to a sequent
       of SearchComponents (see below) and supports distributed
       queries across multiple shards
    -->

    <!-- for most searches, including Blacklight's pulldown menu for the single search box
         Pulldown usage:
           q=terms anywhere
           q={!qf=$qf_title pf=$pf_title pf3=$pf3_title pf2=$pf2_title}a book title
           q={!qf=$qf_author pf=$pf_author pf3=$pf3_author pf2=$pf2_author}author name
           q=yer_callnum&df=callnum_search&defType=lucene&q.op=AND
         Advanced search requests use:
           defType=lucene&q=_query_:"{!dismax qf=$qf_a pf=$pf_a pf3=$pf3_a pf2=$pf2_a}qa" [AND|OR] _query_:"{!dismax qf=$qf_b pf=$pf_b pf3=$pf3_b pf2=$pf2_b}qb" -->
    <requestHandler name="search" class="solr.SearchHandler" default="true">
      <lst name="defaults">
        <str name="defType">edismax</str>
        <str name="echoParams">explicit</str>
        <str name="sort">score desc, pub_date_sort desc, title_sort asc</str>
        <int name="rows">20</int>
        <str name="q.alt">*:*</str>
        <str name="mm">6&lt;-1 6&lt;90%</str>
        <int name="qs">1</int>
        <int name="ps">0</int>
        <float name="tie">0.01</float>
        <bool name="lowercaseOperators">false</bool>
        <!-- in case lucene query parser -->
        <str name="df">all_search</str>
        <str name="q.op">AND</str>

        <str name="qf">
          title_245a_exact_search^1000
          title_245a_unstem_search^500
          title_245a_search^75           vern_title_245a_search^75
          title_245_unstem_search^75
          title_245_search^50            vern_title_245_search^50
          title_uniform_unstem_search^50
          title_uniform_search^20        vern_title_uniform_search^20
          title_variant_unstem_search^20
          title_variant_search^15        vern_title_variant_search^15
          title_related_unstem_search^15
          title_related_search^10        vern_title_related_search^10
          series_exact_search^10
          series_unstem_search^5
          series_search^2                vern_series_search^2

          author_1xx_unstem_search^25
          author_1xx_search^20           vern_author_1xx_search^20
          author_7xx_unstem_search^20
          author_7xx_search^10           vern_author_7xx_search^10
          author_8xx_unstem_search^10
          author_8xx_search^5            vern_author_8xx_search^5

          topic_unstem_search^50
          topic_search^20                vern_topic_search^20
          geographic_unstem_search^20
          geographic_search^10           vern_geographic_search^10
          subject_other_unstem_search^10
          subject_other_search^5         vern_subject_other_search^5
          db_az_subject_search^5
          topic_subx_unstem_search^5
          topic_subx_search^2            vern_topic_subx_search^2
          geographic_subz_unstem_search^5
          geographic_subz_search^2       vern_geographic_subz_search^2
          subject_other_subvy_unstem_search^5
          subject_other_subvy_search^2   vern_subject_other_subvy_search^2
          subject_all_unstem_search^5
          subject_all_search^2           vern_subject_all_search^2

          toc_unstem_search^5
          toc_search^2                   vern_toc_search^2
          context_unstem_search^5
          context_search^2               vern_context_search^2
          summary_unstem_search^5
          summary_search^2               vern_summary_search^2

          pub_date_search^2
          isbn_search^1.5
          issn_search^1.5
          id
          druid
          oclc
          barcode_search
          physical                       vern_physical
          award_search
          collection_search
          all_unstem_search^5
          all_search                     vern_all_search
        </str>
        <str name="pf"> <!-- (phrase boost within result set) -->
          title_245a_exact_search^5000
          title_245a_unstem_search^2500
          title_245a_search^375          vern_title_245a_search^375
          title_245_unstem_search^375
          title_245_search^250           vern_title_245_search^250
          title_uniform_unstem_search^250
          title_uniform_search^100       vern_title_uniform_search^100
          title_variant_unstem_search^100
          title_variant_search^75        vern_title_variant_search^75
          title_related_unstem_search^75
          title_related_search^50        vern_title_related_search^50
          series_exact_search^50
          series_unstem_search^25
          series_search^10               vern_series_search^10

          author_1xx_unstem_search^125
          author_1xx_search^100          vern_author_1xx_search^100
          author_7xx_unstem_search^100
          author_7xx_search^50           vern_author_7xx_search^50
          author_8xx_unstem_search^50
          author_8xx_search^25           vern_author_8xx_search^25

          topic_unstem_search^250
          topic_search^100               vern_topic_search^100
          geographic_unstem_search^100
          geographic_search^50           vern_geographic_search^50
          subject_other_unstem_search^50
          subject_other_search^25        vern_subject_other_search^25
          db_az_subject_search^25
          topic_subx_unstem_search^25
          topic_subx_search^10           vern_topic_subx_search^10
          geographic_subz_unstem_search^25
          geographic_subz_search^10      vern_geographic_subz_search^10
          subject_other_subvy_unstem_search^25
          subject_other_subvy_search^10  vern_subject_other_subvy_search^10
          subject_all_unstem_search^25
          subject_all_search^10          vern_subject_all_search^10

          toc_unstem_search^25
          toc_search^10                  vern_toc_search^10
          context_unstem_search^25
          context_search^10              vern_context_search^10
          summary_unstem_search^25
          summary_search^10              vern_summary_search^10

          pub_date_search^10
          issn_search^7.5
          physical^5                     vern_physical^5
          award_search^5
          collection_search^5
          all_unstem_search^25
          all_search^5                   vern_all_search^5
        </str>
        <str name="pf3">  <!-- (token trigrams boost within result set) -->
          title_245a_search^1500         vern_title_245a_search^1500
          title_245_search^225           vern_title_245_search^225
          title_uniform_search^150       vern_title_uniform_search^150
          title_variant_search^60        vern_title_variant_search^60
          title_related_search^45        vern_title_related_search^45
          series_search^30               vern_series_search^30

          author_1xx_search^75           vern_author_1xx_search^75
          author_7xx_search^60           vern_author_7xx_search^60
          author_8xx_search^30           vern_author_8xx_search^30

          topic_search^150               vern_topic_search^150
          geographic_search^60           vern_geographic_search^60
          subject_other_search^30        vern_subject_other_search^30
          db_az_subject_search^15
          topic_subx_search^15           vern_topic_subx_search^15
          geographic_subz_search^15      vern_geographic_subz_search^15
          subject_other_subvy_search^15  vern_subject_other_subvy_search^15
          subject_all_search^15          vern_subject_all_search^15

          toc_search^7.5                 vern_toc_search^7.5
          context_search^7.5             vern_context_search^7.5
          summary_search^7.5             vern_summary_search^7.5
          physical^3                     vern_physical^3
          award_search^3
          collection_search^3
          all_search^3                   vern_all_search^3
        </str>
        <str name="pf2"> <!--(token bigrams boost within result set) -->
          title_245a_search^1000         vern_title_245a_search^1000
          title_245_search^150           vern_title_245_search^150
          title_uniform_search^100       vern_title_uniform_search^100
          title_variant_search^40        vern_title_variant_search^40
          title_related_search^30        vern_title_related_search^30
          series_search^20               vern_series_search^20

          author_1xx_search^50           vern_author_1xx_search^50
          author_7xx_search^40           vern_author_7xx_search^40
          author_8xx_search^20           vern_author_8xx_search^20

          topic_search^100               vern_topic_search^100
          geographic_search^40           vern_geographic_search^40
          subject_other_search^20        vern_subject_other_search^20
          db_az_subject_search^10
          topic_subx_search^10           vern_topic_subx_search^10
          geographic_subz_search^10      vern_geographic_subz_search^10
          subject_other_subvy_search^10  vern_subject_other_subvy_search^10
          subject_all_search^10          vern_subject_all_search^10

          toc_search^5                   vern_toc_search^5
          context_search^5               vern_context_search^5
          summary_search^5               vern_summary_search^5
          physical^2                     vern_physical^2
          award_search^2
          collection_search^2
          all_search^2                   vern_all_search^2
        </str>

        <str name="qf_cjk">
          title_245a_exact_search^1000
          title_245a_unstem_search^500
          title_245a_search^75           vern_title_245a_search^75           cjk_title_245a_search^75
          title_245_unstem_search^75
          title_245_search^50            vern_title_245_search^50            cjk_title_245_search^50
          title_uniform_unstem_search^50
          title_uniform_search^20        vern_title_uniform_search^20        cjk_title_uniform_search^20
          title_variant_unstem_search^20
          title_variant_search^15        vern_title_variant_search^15        cjk_title_variant_search^15
          title_related_unstem_search^15
          title_related_search^10        vern_title_related_search^10        cjk_title_related_search^10
          series_exact_search^10
          series_unstem_search^5
          series_search^2                vern_series_search^2                cjk_series_search^2

          author_1xx_unstem_search^25
          author_1xx_search^20           vern_author_1xx_search^20           cjk_author_1xx_search^20
          author_7xx_unstem_search^20
          author_7xx_search^10           vern_author_7xx_search^10           cjk_author_7xx_search^10
          author_8xx_unstem_search^10
          author_8xx_search^5            vern_author_8xx_search^5            cjk_author_8xx_search^5

          topic_unstem_search^50
          topic_search^20                vern_topic_search^20                cjk_topic_search^20
          geographic_unstem_search^20
          geographic_search^10           vern_geographic_search^10           cjk_geographic_search^10
          subject_other_unstem_search^10
          subject_other_search^5         vern_subject_other_search^5         cjk_subject_other_search^5
          db_az_subject_search^5
          topic_subx_unstem_search^5
          topic_subx_search^2            vern_topic_subx_search^2            cjk_topic_subx_search^2
          geographic_subz_unstem_search^5
          geographic_subz_search^2       vern_geographic_subz_search^2       cjk_geographic_subz_search^2
          subject_other_subvy_unstem_search^5
          subject_other_subvy_search^2   vern_subject_other_subvy_search^2   cjk_subject_other_subvy_search^2
          subject_all_unstem_search^5
          subject_all_search^2           vern_subject_all_search^2           cjk_subject_all_search^2

          toc_unstem_search^5
          toc_search^2                   vern_toc_search^2                   cjk_toc_search^2
          context_unstem_search^5
          context_search^2               vern_context_search^2               cjk_context_search^2
          summary_unstem_search^5
          summary_search^2               vern_summary_search^2               cjk_summary_search^2

          pub_date_search^2
          isbn_search^1.5
          issn_search^1.5
          id
          oclc
          barcode_search
          physical                       vern_physical                       cjk_physical_search
          award_search
          collection_search
          all_unstem_search^5
          all_search                     vern_all_search                     cjk_all_search
        </str>
        <str name="pf_cjk"> <!-- (phrase boost within result set) -->
          title_245a_exact_search^5000
          title_245a_unstem_search^2500
          title_245a_search^375          vern_title_245a_search^375          cjk_title_245a_search^375
          title_245_unstem_search^375
          title_245_search^250           vern_title_245_search^250           cjk_title_245_search^250
          title_uniform_unstem_search^250
          title_uniform_search^100       vern_title_uniform_search^100       cjk_title_uniform_search^100
          title_variant_unstem_search^100
          title_variant_search^75        vern_title_variant_search^75        cjk_title_variant_search^75
          title_related_unstem_search^75
          title_related_search^50        vern_title_related_search^50        cjk_title_related_search^50
          series_exact_search^50
          series_unstem_search^25
          series_search^10               vern_series_search^10               cjk_series_search^10

          author_1xx_unstem_search^125
          author_1xx_search^100          vern_author_1xx_search^100          cjk_author_1xx_search^100
          author_7xx_unstem_search^100
          author_7xx_search^50           vern_author_7xx_search^50           cjk_author_7xx_search^50
          author_8xx_unstem_search^50
          author_8xx_search^25           vern_author_8xx_search^25           cjk_author_8xx_search^25

          topic_unstem_search^250
          topic_search^100               vern_topic_search^100               cjk_topic_search^100
          geographic_unstem_search^100
          geographic_search^50           vern_geographic_search^50           cjk_geographic_search^50
          subject_other_unstem_search^50
          subject_other_search^25        vern_subject_other_search^25        cjk_subject_other_search^25
          db_az_subject_search^25
          topic_subx_unstem_search^25
          topic_subx_search^10           vern_topic_subx_search^10           cjk_topic_subx_search^10
          geographic_subz_unstem_search^25
          geographic_subz_search^10      vern_geographic_subz_search^10      cjk_geographic_subz_search^10
          subject_other_subvy_unstem_search^25
          subject_other_subvy_search^10  vern_subject_other_subvy_search^10  cjk_subject_other_subvy_search^10
          subject_all_unstem_search^25
          subject_all_search^10          vern_subject_all_search^10          cjk_subject_all_search^10

          toc_unstem_search^25
          toc_search^10                  vern_toc_search^10                  cjk_toc_search^10
          context_unstem_search^25
          context_search^10              vern_context_search^10              cjk_context_search^10
          summary_unstem_search^25
          summary_search^10              vern_summary_search^10              cjk_summary_search^10

          pub_date_search^10
          issn_search^7.5
          physical^5                     vern_physical^5                     cjk_physical_search^5
          award_search^5
          collection_search^5
          all_unstem_search^25
          all_search^5                   vern_all_search^5                   cjk_all_search^5
        </str>
        <str name="pf3_cjk">  <!-- (token trigrams boost within result set) -->
          title_245a_search^1500         vern_title_245a_search^1500         cjk_title_245a_search^1500
          title_245_search^225           vern_title_245_search^225           cjk_title_245_search^225
          title_uniform_search^150       vern_title_uniform_search^150       cjk_title_uniform_search^150
          title_variant_search^60        vern_title_variant_search^60        cjk_title_variant_search^60
          title_related_search^45        vern_title_related_search^45        cjk_title_related_search^45
          series_search^30               vern_series_search^30               cjk_series_search^30

          author_1xx_search^75           vern_author_1xx_search^75           cjk_author_1xx_search^75
          author_7xx_search^60           vern_author_7xx_search^60           cjk_author_7xx_search^60
          author_8xx_search^30           vern_author_8xx_search^30           cjk_author_8xx_search^30

          topic_search^150               vern_topic_search^150               cjk_topic_search^150
          geographic_search^60           vern_geographic_search^60           cjk_geographic_search^60
          subject_other_search^30        vern_subject_other_search^30        cjk_subject_other_search^30
          db_az_subject_search^15
          topic_subx_search^15           vern_topic_subx_search^15           cjk_topic_subx_search^15
          geographic_subz_search^15      vern_geographic_subz_search^15      cjk_geographic_subz_search^15
          subject_other_subvy_search^15  vern_subject_other_subvy_search^15  cjk_subject_other_subvy_search^15
          subject_all_search^15          vern_subject_all_search^15          cjk_subject_all_search^15

          toc_search^7.5                 vern_toc_search^7.5                 cjk_toc_search^7.5
          context_search^7.5             vern_context_search^7.5             cjk_context_search^7.5
          summary_search^7.5             vern_summary_search^7.5             cjk_summary_search^7.5
          physical^3                     vern_physical^3                     cjk_physical_search^3
          award_search^3
          collection_search^3
          all_search^3                   vern_all_search^3                   cjk_all_search^3
        </str>
        <str name="pf2_cjk"> <!--(token bigrams boost within result set) -->
          title_245a_search^1000         vern_title_245a_search^1000         cjk_title_245a_search^1000
          title_245_search^150           vern_title_245_search^150           cjk_title_245_search^150
          title_uniform_search^100       vern_title_uniform_search^100       cjk_title_uniform_search^100
          title_variant_search^40        vern_title_variant_search^40        cjk_title_variant_search^40
          title_related_search^30        vern_title_related_search^30        cjk_title_related_search^30
          series_search^20               vern_series_search^20               cjk_series_search^20

          author_1xx_search^50           vern_author_1xx_search^50           cjk_author_1xx_search^50
          author_7xx_search^40           vern_author_7xx_search^40           cjk_author_7xx_search^40
          author_8xx_search^20           vern_author_8xx_search^20           cjk_author_8xx_search^20

          topic_search^100               vern_topic_search^100               cjk_topic_search^100
          geographic_search^40           vern_geographic_search^40           cjk_geographic_search^40
          subject_other_search^20        vern_subject_other_search^20        cjk_subject_other_search^20
          db_az_subject_search^10
          topic_subx_search^10           vern_topic_subx_search^10           cjk_topic_subx_search^10
          geographic_subz_search^10      vern_geographic_subz_search^10      cjk_geographic_subz_search^10
          subject_other_subvy_search^10  vern_subject_other_subvy_search^10  cjk_subject_other_subvy_search^10
          subject_all_search^10          vern_subject_all_search^10          cjk_subject_all_search^10

          toc_search^5                   vern_toc_search^5                   cjk_toc_search^5
          context_search^5               vern_context_search^5               cjk_context_search^5
          summary_search^5               vern_summary_search^5               cjk_summary_search^5
          physical^2                     vern_physical^2                     cjk_physical_search^2
          award_search^2
          collection_search^2
          all_search^2                   vern_all_search^2                   cjk_all_search^2
        </str>


        <str name="qf_title">
          title_245a_exact_search^350
          title_245a_unstem_search^100
          title_245a_search^75           vern_title_245a_search^75
          title_245_unstem_search^75
          title_245_search^50            vern_title_245_search^50
          title_uniform_unstem_search^50
          title_uniform_search^20        vern_title_uniform_search^20
          title_variant_unstem_search^20
          title_variant_search^10        vern_title_variant_search^10
          title_related_unstem_search^10
          title_related_search^5         vern_title_related_search^5
          series_exact_search^5
          series_unstem_search^2
          series_search                  vern_series_search
        </str>
        <str name="pf_title"> <!-- (phrase) -->
          title_245a_exact_search^1750
          title_245a_unstem_search^500
          title_245a_search^375          vern_title_245a_search^375
          title_245_unstem_search^375
          title_245_search^250           vern_title_245_search^250
          title_uniform_unstem_search^250
          title_uniform_search^100       vern_title_uniform_search^100
          title_variant_unstem_search^100
          title_variant_search^50        vern_title_variant_search^50
          title_related_unstem_search^50
          title_related_search^25        vern_title_related_search^25
          series_exact_search^25
          series_unstem_search^10
          series_search^5                vern_series_search^5
        </str>
        <str name="pf3_title"> <!-- (token trigrams) -->
          title_245a_search^300          vern_title_245a_search^300
          title_245_search^225           vern_title_245_search^225
          title_uniform_search^150       vern_title_uniform_search^150
          title_variant_search^60        vern_title_variant_search^60
          title_related_search^15        vern_title_related_search^15
          series_search^3                vern_series_search^3
        </str>
        <str name="pf2_title"> <!-- (token bigrams) -->
          title_245a_search^200          vern_title_245a_search^200
          title_245_search^150           vern_title_245_search^150
          title_uniform_search^100       vern_title_uniform_search^100
          title_variant_search^40        vern_title_variant_search^40
          title_related_search^10        vern_title_related_search^10
          series_search^2                vern_series_search^2
        </str>

        <str name="qf_title_cjk">
          title_245a_exact_search^350
          title_245a_unstem_search^100
          title_245a_search^75           vern_title_245a_search^75           cjk_title_245a_search^75
          title_245_unstem_search^75
          title_245_search^50            vern_title_245_search^50            cjk_title_245_search^50
          title_uniform_unstem_search^50
          title_uniform_search^20        vern_title_uniform_search^20        cjk_title_uniform_search^20
          title_variant_unstem_search^20
          title_variant_search^10        vern_title_variant_search^10        cjk_title_variant_search^10
          title_related_unstem_search^10
          title_related_search^5         vern_title_related_search^5         cjk_title_related_search^5
          series_exact_search^5
          series_unstem_search^2
          series_search                  vern_series_search                  cjk_series_search
        </str>
        <str name="pf_title_cjk"> <!-- (phrase) -->
          title_245a_exact_search^1750
          title_245a_unstem_search^500
          title_245a_search^375          vern_title_245a_search^375          cjk_title_245a_search^375
          title_245_unstem_search^375
          title_245_search^250           vern_title_245_search^250           cjk_title_245_search^250
          title_uniform_unstem_search^250
          title_uniform_search^100       vern_title_uniform_search^100       cjk_title_uniform_search^100
          title_variant_unstem_search^100
          title_variant_search^50        vern_title_variant_search^50        cjk_title_variant_search^50
          title_related_unstem_search^50
          title_related_search^25        vern_title_related_search^25        cjk_title_related_search^25
          series_exact_search^25
          series_unstem_search^10
          series_search^5                vern_series_search^5                cjk_series_search^5
        </str>
        <str name="pf3_title_cjk"> <!-- (token trigrams) -->
          title_245a_search^300          vern_title_245a_search^300          cjk_title_245a_search^300
          title_245_search^225           vern_title_245_search^225           cjk_title_245_search^225
          title_uniform_search^150       vern_title_uniform_search^150       cjk_title_uniform_search^150
          title_variant_search^60        vern_title_variant_search^60        cjk_title_variant_search^60
          title_related_search^15        vern_title_related_search^15        cjk_title_related_search^15
          series_search^3                vern_series_search^3                cjk_series_search^3
        </str>
        <str name="pf2_title_cjk"> <!-- (token bigrams) -->
          title_245a_search^200          vern_title_245a_search^200          cjk_title_245a_search^200
          title_245_search^150           vern_title_245_search^150           cjk_title_245_search^150
          title_uniform_search^100       vern_title_uniform_search^100       cjk_title_uniform_search^100
          title_variant_search^40        vern_title_variant_search^40        cjk_title_variant_search^40
          title_related_search^10        vern_title_related_search^10        cjk_title_related_search^10
          series_search^2                vern_series_search^2                cjk_series_search^2
        </str>


        <str name="qf_author">
          author_1xx_unstem_search^20
          author_1xx_search^5            vern_author_1xx_search^5
          author_7xx_unstem_search^10
          author_7xx_search^2            vern_author_7xx_search^2
          author_8xx_unstem_search^2
          author_8xx_search              vern_author_8xx_search
        </str>
        <str name="pf_author"> <!-- (phrase) -->
          author_1xx_search^100          vern_author_1xx_search^100
          author_7xx_search^50           vern_author_7xx_search^50
          author_8xx_search^10           vern_author_8xx_search^10
        </str>
        <str name="pf3_author"> <!-- (token trigrams) -->
          author_1xx_search^60           vern_author_1xx_search^60
          author_7xx_search^30           vern_author_7xx_search^30
          author_8xx_search^5            vern_author_8xx_search^5
        </str>
        <str name="pf2_author"> <!-- (token bigrams) -->
          author_1xx_search^40           vern_author_1xx_search^40
          author_7xx_search^20           vern_author_7xx_search^20
          author_8xx_search^2            vern_author_8xx_search^2
        </str>

        <str name="qf_author_cjk">
          author_1xx_unstem_search^20
          author_1xx_search^5            vern_author_1xx_search^5            cjk_author_1xx_search^5
          author_7xx_unstem_search^10
          author_7xx_search^2            vern_author_7xx_search^2            cjk_author_7xx_search^2
          author_8xx_unstem_search^2
          author_8xx_search              vern_author_8xx_search              cjk_author_8xx_search
        </str>
        <str name="pf_author_cjk"> <!-- (phrase) -->
          author_1xx_search^100          vern_author_1xx_search^100          cjk_author_1xx_search^100
          author_7xx_search^50           vern_author_7xx_search^50           cjk_author_7xx_search^50
          author_8xx_search^10           vern_author_8xx_search^10           cjk_author_8xx_search^10
        </str>
        <str name="pf3_author_cjk"> <!-- (token trigrams) -->
          author_1xx_search^60           vern_author_1xx_search^60           cjk_author_1xx_search^60
          author_7xx_search^30           vern_author_7xx_search^30           cjk_author_7xx_search^30
          author_8xx_search^5            vern_author_8xx_search^5            cjk_author_8xx_search^5
        </str>
        <str name="pf2_author_cjk"> <!-- (token bigrams) -->
          author_1xx_search^40           vern_author_1xx_search^40           cjk_author_1xx_search^40
          author_7xx_search^20           vern_author_7xx_search^20           cjk_author_7xx_search^20
          author_8xx_search^2            vern_author_8xx_search^2            cjk_author_8xx_search^2
        </str>


        <str name="qf_subject">
          topic_unstem_search^50
          topic_search^20                vern_topic_search^20
          geographic_unstem_search^20
          geographic_search^10           vern_geographic_search^10
          subject_other_unstem_search^10
          subject_other_search^5         vern_subject_other_search^5
          topic_subx_unstem_search^2
          topic_subx_search              vern_topic_subx_search
          geographic_subz_unstem_search^2
          geographic_subz_search         vern_geographic_subz_search
          subject_other_subvy_unstem_search^2
          subject_other_subvy_search     vern_subject_other_subvy_search
          subject_all_unstem_search^2
          subject_all_search             vern_subject_all_search
          db_az_subject_search
        </str>
        <str name="pf_subject"> <!-- (phrase) -->
          topic_unstem_search^250
          topic_search^100               vern_topic_search^100
          geographic_unstem_search^100
          geographic_search^50           vern_geographic_search^50
          subject_other_unstem_search^25
          subject_other_search^25        vern_subject_other_search^25
          topic_subx_unstem_search^10
          topic_subx_search^5            vern_topic_subx_search^5
          geographic_subz_unstem_search^10
          geographic_subz_search^5       vern_geographic_subz_search^5
          subject_other_subvy_unstem_search^10
          subject_other_subvy_search^5   vern_subject_other_subvy_search^5
          subject_all_unstem_search^10
          subject_all_search^5           vern_subject_all_search^5
          db_az_subject_search^5
        </str>
        <str name="pf3_subject"> <!-- (token trigrams) -->
          topic_search^150               vern_topic_search^150
          subject_all_search^75          vern_subject_all_search^75
          db_az_subject_search^3
        </str>
        <str name="pf2_subject"> <!-- (token bigrams) -->
          topic_search^100               vern_topic_search^100
          subject_all_search^50          vern_subject_all_search^50
          db_az_subject_search^2
        </str>

        <str name="qf_subject_cjk">
          topic_unstem_search^50
          topic_search^20                vern_topic_search^20                cjk_topic_search^20
          geographic_unstem_search^20
          geographic_search^10           vern_geographic_search^10           cjk_geographic_search^10
          subject_other_unstem_search^10
          subject_other_search^5         vern_subject_other_search^5         cjk_subject_other_search^5
          topic_subx_unstem_search^2
          topic_subx_search              vern_topic_subx_search              cjk_topic_subx_search
          geographic_subz_unstem_search^2
          geographic_subz_search         vern_geographic_subz_search         cjk_geographic_subz_search
          subject_other_subvy_unstem_search^2
          subject_other_subvy_search     vern_subject_other_subvy_search     cjk_subject_other_subvy_search
          subject_all_unstem_search^2
          subject_all_search             vern_subject_all_search             cjk_subject_all_search
          db_az_subject_search
        </str>
        <str name="pf_subject_cjk"> <!-- (phrase) -->
          topic_unstem_search^250
          topic_search^100               vern_topic_search^100               cjk_topic_search^100
          geographic_unstem_search^100
          geographic_search^50           vern_geographic_search^50           cjk_geographic_search^50
          subject_other_unstem_search^25
          subject_other_search^25        vern_subject_other_search^25        cjk_subject_other_search^25
          topic_subx_unstem_search^10
          topic_subx_search^5            vern_topic_subx_search^5            cjk_topic_subx_search^5
          geographic_subz_unstem_search^10
          geographic_subz_search^5       vern_geographic_subz_search^5       cjk_geographic_subz_search^5
          subject_other_subvy_unstem_search^10
          subject_other_subvy_search^5   vern_subject_other_subvy_search^5   cjk_subject_other_subvy_search^5
          subject_all_unstem_search^10
          subject_all_search^5           vern_subject_all_search^5           cjk_subject_all_search^5
          db_az_subject_search^5
        </str>
        <str name="pf3_subject_cjk"> <!-- (token trigrams) -->
          topic_search^150               vern_topic_search^150               cjk_topic_search^150
          subject_all_search^75          vern_subject_all_search^75          cjk_subject_all_search^75
          db_az_subject_search^3
        </str>
        <str name="pf2_subject_cjk"> <!-- (token bigrams) -->
          topic_search^100               vern_topic_search^100               cjk_topic_search^100
          subject_all_search^50          vern_subject_all_search^50          cjk_subject_all_search^50
          db_az_subject_search^2
        </str>


        <str name="qf_series">
          series_exact_search^5
          series_unstem_search^2
          series_search                  vern_series_search
        </str>
        <str name="pf_series"> <!-- (phrase) -->
          series_exact_search^25
          series_search^10               vern_series_search^10
        </str>
        <str name="pf3_series"> <!-- (token trigrams) -->
          series_search^5                vern_series_search^5
        </str>
        <str name="pf2_series"> <!-- (token bigrams) -->
          series_search^2                vern_series_search^2
        </str>

        <str name="qf_series_cjk">
          series_exact_search^5
          series_unstem_search^2
          series_search                  vern_series_search                  cjk_series_search
        </str>
        <str name="pf_series_cjk"> <!-- (phrase) -->
          series_exact_search^25
          series_search^10               vern_series_search^10               cjk_series_search^10
        </str>
        <str name="pf3_series_cjk"> <!-- (token trigrams) -->
          series_search^5                vern_series_search^5                cjk_series_search^5
        </str>
        <str name="pf2_series_cjk"> <!-- (token bigrams) -->
          series_search^2                vern_series_search^2                cjk_series_search^2
        </str>


        <!-- for course reserves searches -->
        <str name="qf_crez">
        	crez_instructor_search
        	crez_course_name_search
          crez_course_id_search
        </str>
        <str name="pf_crez">
        	crez_instructor_search^2
        	crez_course_name_search^2
        </str>
        <str name="sort_crez">score desc, title_sort asc, pub_date_sort desc</str>


        <!-- for advanced search publisher text box -->
        <str name="qf_pub_info">
          pub_search                     vern_pub_search
          pub_country
          pub_date_search
        </str>
        <str name="pf_pub_info">
          pub_search^5                   vern_pub_search^5
          pub_country^5
          pub_date_search^5
        </str>
        <str name="pf3_pub_info">pub_search^3 vern_pub_search^3</str>
        <str name="pf2_pub_info">pub_search^2 vern_pub_search^2</str>

        <str name="qf_pub_info_cjk">
          pub_search                     vern_pub_search                     cjk_pub_search
          pub_country
          pub_date_search
        </str>
        <str name="pf_pub_info_cjk">
          pub_search^5                   vern_pub_search^5                   cjk_pub_search^5
          pub_country^5
          pub_date_search^5
        </str>
        <str name="pf3_pub_info_cjk">pub_search^3 vern_pub_search^3 cjk_pub_search^3</str>
        <str name="pf2_pub_info_cjk">pub_search^2 vern_pub_search^2 cjk_pub_search^2</str>

        <!-- for advanced search number text box -->
        <str name="qf_number">
          id
          isbn_search
          issn_search
          oclc
          barcode_search
          callnum_search
        </str>
        <str name="pf_number">issn_search^5 callnum_search^5</str>
        <str name="pf3_number">callnum_search^3</str>
        <str name="pf2_number">callnum_search^2</str>

        <bool name="facet">true</bool>
        <int name="facet.mincount">1</int>
        <int name="facet.limit">21</int>
        <str name="facet.field">access_facet</str>
          <str name="f.access_facet.facet.method">enum</str>
        <str name="facet.field">author_person_facet</str>
        <str name="facet.field">author_other_facet</str>
        <str name="facet.field">building_facet</str>
          <str name="f.building_facet.facet.method">enum</str>
          <str name="f.building_facet.facet.limit">-1</str>
        <str name="facet.field">callnum_facet_hsim</str>
          <str name="f.callnum_facet_hsim.facet.sort">index</str>
          <int name="f.callnum_facet_hsim.facet.limit">-1</int>
          <str name="f.callnum_facet_hsim.facet.method">enum</str>
        <str name="facet.field">collection</str>
          <str name="f.collection.facet.method">enum</str>
        <str name="facet.field">db_az_subject</str>
          <str name="f.db_az_subject.facet.method">enum</str>
          <str name="f.db_az_subject.facet.sort">index</str>
        <!-- display_type can be removed after all DOR objects and MARC records are reindexed in Feb/March 2016 -->
        <str name="facet.field">display_type</str>
          <str name="f.display_type.facet.method">enum</str>
        <str name="facet.field">era_facet</str>
        <str name="facet.field">format_main_ssim</str>
          <int name="f.format_main_ssim.facet.limit">-1</int>
          <str name="f.format_main_ssim.facet.method">enum</str>
        <str name="facet.field">format_physical_ssim</str>
          <int name="f.format_physical_ssim.facet.limit">20</int>
          <str name="f.format_physical_ssim.facet.method">enum</str>
        <str name="facet.field">format</str> # <!-- deprecated: left for continuity in UI URLs for old formats -->
          <str name="f.format.facet.method">enum</str>
        <str name="facet.field">fund_facet</str>
        <str name="facet.field">genre_ssim</str>
          <str name="f.genre_ssim.facet.method">enum</str>
        <str name="facet.field">geographic_facet</str>
        <str name="facet.field">language</str>
        <str name="facet.field">location_facet</str>
        <str name="facet.field">pub_date</str>
        <str name="facet.field">pub_year_tisim</str>
        <str name="facet.field">topic_facet</str>

        <!-- Highlighting defaults -->
        <str name="hl.fl">all_search</str>

        <str name="fl">
          score,
          id,
          author_corp_display,          vern_author_corp_display,
          author_meeting_display,       vern_author_meeting_display,
          author_person_display,        vern_author_person_display,
          author_person_full_display,   vern_author_person_full_display,
          bookplates_display,
          collection,
          collection_type,
          collection_with_title,
          crez_course_info,
          db_az_subject,
          <!-- display_type can be removed after all DOR objects and MARC records are reindexed in Feb/March 2016 -->
          display_type,
          file_id,
          set,
          set_with_title,
          format,
          format_main_ssim,
          format_physical_ssim,
          genre_ssim,
          imprint_display,
          isbn_display,
          item_display,
          lccn,
          marcbib_xml,
          mhld_display,
          modsxml,
          oclc,
          physical,                     vern_physical,
          preferred_barcode,
          pub_date,
          pub_year_ss,
          publication_year_isi,
          beginning_year_isi,
          earliest_year_isi,
          earliest_poss_year_isi,
          release_year_isi,
          reprint_year_isi,
          ending_year_isi,
          latest_year_isi,
          latest_poss_year_isi,
          production_year_isi,
          original_year_isi,
          copyright_year_isi,
          summary_display,
          title_245a_display,           vern_title_245a_display,
          title_245c_display,           vern_title_245c_display,
          title_display,                vern_title_display,
          title_full_display,           vern_title_full_display,
          title_uniform_display,        vern_title_uniform_display
          url_fulltext,
          url_restricted,
          url_suppl,
          url_sfx,
          managed_purl_urls
        </str>
      </lst>
    </requestHandler>

    <!-- single document requests; use id=666 instead of q=id:666 -->
    <requestHandler name="document" class="solr.SearchHandler" >
      <lst name="defaults">
        <str name="echoParams">explicit</str>
        <str name="fl">*</str>
        <int name="rows">1</int>
        <str name="q">{!raw f=id v=$id}</str> <!-- use id=666 instead of q=id:666 -->
      </lst>
    </requestHandler>

    <!-- barcode requests; use /barcode?q=1234567890 -->
    <requestHandler name="/barcode" class="solr.SearchHandler" >
      <lst name="defaults">
        <str name="echoParams">explicit</str>
        <str name="fl">id</str>
        <str name="q">{!field f=barcode_search v=$n}</str>
      </lst>
    </requestHandler>

  <requestHandler name="/select" class="solr.SearchHandler">
    <!-- default values for query parameters can be specified, these
         will be overridden by parameters in the request
      -->
    <lst name="defaults">
      <str name="echoParams">explicit</str>
      <int name="rows">10</int>
      <!-- <str name="df">text</str> -->
    </lst>
    <!-- In addition to defaults, "appends" params can be specified
         to identify values which should be appended to the list of
         multi-val params from the query (or the existing "defaults").
      -->
    <!-- In this example, the param "fq=instock:true" would be appended to
         any query time fq params the user may specify, as a mechanism for
         partitioning the index, independent of any user selected filtering
         that may also be desired (perhaps as a result of faceted searching).

         NOTE: there is *absolutely* nothing a client can do to prevent these
         "appends" values from being used, so don't use this mechanism
         unless you are sure you always want it.
      -->
    <!--
       <lst name="appends">
         <str name="fq">inStock:true</str>
       </lst>
      -->
    <!-- "invariants" are a way of letting the Solr maintainer lock down
         the options available to Solr clients.  Any params values
         specified here are used regardless of what values may be specified
         in either the query, the "defaults", or the "appends" params.

         In this example, the facet.field and facet.query params would
         be fixed, limiting the facets clients can use.  Faceting is
         not turned on by default - but if the client does specify
         facet=true in the request, these are the only facets they
         will be able to see counts for; regardless of what other
         facet.field or facet.query params they may specify.

         NOTE: there is *absolutely* nothing a client can do to prevent these
         "invariants" values from being used, so don't use this mechanism
         unless you are sure you always want it.
      -->
    <!--
       <lst name="invariants">
         <str name="facet.field">cat</str>
         <str name="facet.field">manu_exact</str>
         <str name="facet.query">price:[* TO 500]</str>
         <str name="facet.query">price:[500 TO *]</str>
       </lst>
      -->
    <!-- If the default list of SearchComponents is not desired, that
         list can either be overridden completely, or components can be
         prepended or appended to the default list.  (see below)
      -->
    <!--
       <arr name="components">
         <str>nameOfCustomComponent1</str>
         <str>nameOfCustomComponent2</str>
       </arr>
      -->
  </requestHandler>

  <!-- A request handler that returns indented JSON by default -->
  <requestHandler name="/query" class="solr.SearchHandler">
    <lst name="defaults">
      <str name="echoParams">explicit</str>
      <str name="wt">json</str>
      <str name="indent">true</str>
    </lst>
  </requestHandler>


  <!--These useParams values are available in params.json-->
  <requestHandler name="/browse" class="solr.SearchHandler" useParams="query,facets,velocity,browse"/>


  <initParams path="/update/**,/query,/select,/tvrh,/elevate,/spell,/browse">
    <lst name="defaults">
      <str name="df">_text_</str>
    </lst>
  </initParams>

  <initParams path="/update/**">
    <lst name="defaults">
      <str name="update.chain">files-update-processor</str>
    </lst>
  </initParams>

  <!-- Solr Cell Update Request Handler

       http://wiki.apache.org/solr/ExtractingRequestHandler

    -->
  <requestHandler name="/update/extract"
                  startup="lazy"
                  class="solr.extraction.ExtractingRequestHandler" >
    <lst name="defaults">
      <str name="xpath">/xhtml:html/xhtml:body/descendant:node()</str>
      <str name="capture">content</str>
      <str name="fmap.meta">attr_meta_</str>
      <str name="uprefix">attr_</str>
      <str name="lowernames">true</str>
    </lst>
  </requestHandler>

  <!-- Field Analysis Request Handler

       RequestHandler that provides much the same functionality as
       analysis.jsp. Provides the ability to specify multiple field
       types and field names in the same request and outputs
       index-time and query-time analysis for each of them.

       Request parameters are:
       analysis.fieldname - field name whose analyzers are to be used

       analysis.fieldtype - field type whose analyzers are to be used
       analysis.fieldvalue - text for index-time analysis
       q (or analysis.q) - text for query time analysis
       analysis.showmatch (true|false) - When set to true and when
           query analysis is performed, the produced tokens of the
           field value analysis will be marked as "matched" for every
           token that is produces by the query analysis
   -->
  <requestHandler name="/analysis/field"
                  startup="lazy"
                  class="solr.FieldAnalysisRequestHandler" />


  <!-- Document Analysis Handler

       http://wiki.apache.org/solr/AnalysisRequestHandler

       An analysis handler that provides a breakdown of the analysis
       process of provided documents. This handler expects a (single)
       content stream with the following format:

       <docs>
         <doc>
           <field name="id">1</field>
           <field name="name">The Name</field>
           <field name="text">The Text Value</field>
         </doc>
         <doc>...</doc>
         <doc>...</doc>
         ...
       </docs>

    Note: Each document must contain a field which serves as the
    unique key. This key is used in the returned response to associate
    an analysis breakdown to the analyzed document.

    Like the FieldAnalysisRequestHandler, this handler also supports
    query analysis by sending either an "analysis.query" or "q"
    request parameter that holds the query text to be analyzed. It
    also supports the "analysis.showmatch" parameter which when set to
    true, all field tokens that match the query tokens will be marked
    as a "match".
  -->
  <requestHandler name="/analysis/document"
                  class="solr.DocumentAnalysisRequestHandler"
                  startup="lazy" />

  <!-- Echo the request contents back to the client -->
  <requestHandler name="/debug/dump" class="solr.DumpRequestHandler" >
    <lst name="defaults">
      <str name="echoParams">explicit</str>
      <str name="echoHandler">true</str>
    </lst>
  </requestHandler>

  <!-- Search Components

       Search components are registered to SolrCore and used by
       instances of SearchHandler (which can access them by name)

       By default, the following components are available:

       <searchComponent name="query"     class="solr.QueryComponent" />
       <searchComponent name="facet"     class="solr.FacetComponent" />
       <searchComponent name="mlt"       class="solr.MoreLikeThisComponent" />
       <searchComponent name="highlight" class="solr.HighlightComponent" />
       <searchComponent name="stats"     class="solr.StatsComponent" />
       <searchComponent name="debug"     class="solr.DebugComponent" />

       Default configuration in a requestHandler would look like:

       <arr name="components">
         <str>query</str>
         <str>facet</str>
         <str>mlt</str>
         <str>highlight</str>
         <str>stats</str>
         <str>debug</str>
       </arr>

       If you register a searchComponent to one of the standard names,
       that will be used instead of the default.

       To insert components before or after the 'standard' components, use:

       <arr name="first-components">
         <str>myFirstComponentName</str>
       </arr>

       <arr name="last-components">
         <str>myLastComponentName</str>
       </arr>

       NOTE: The component registered with the name "debug" will
       always be executed after the "last-components"

     -->

  <!-- Spell Check

       The spell check component can return a list of alternative spelling
       suggestions.

       http://wiki.apache.org/solr/SpellCheckComponent
    -->
  <searchComponent name="spellcheck" class="solr.SpellCheckComponent">

    <str name="queryAnalyzerFieldType">text_general</str>

    <!-- Multiple "Spell Checkers" can be declared and used by this
         component
      -->

    <!-- a spellchecker built from a field of the main index -->
    <lst name="spellchecker">
      <str name="name">default</str>
      <str name="field">text</str>
      <str name="classname">solr.DirectSolrSpellChecker</str>
      <!-- the spellcheck distance measure used, the default is the internal levenshtein -->
      <str name="distanceMeasure">internal</str>
      <!-- minimum accuracy needed to be considered a valid spellcheck suggestion -->
      <float name="accuracy">0.5</float>
      <!-- the maximum #edits we consider when enumerating terms: can be 1 or 2 -->
      <int name="maxEdits">2</int>
      <!-- the minimum shared prefix when enumerating terms -->
      <int name="minPrefix">1</int>
      <!-- maximum number of inspections per result. -->
      <int name="maxInspections">5</int>
      <!-- minimum length of a query term to be considered for correction -->
      <int name="minQueryLength">4</int>
      <!-- maximum threshold of documents a query term can appear to be considered for correction -->
      <float name="maxQueryFrequency">0.01</float>
      <!-- uncomment this to require suggestions to occur in 1% of the documents
        <float name="thresholdTokenFrequency">.01</float>
      -->
    </lst>

    <!-- a spellchecker that can break or combine words.  See "/spell" handler below for usage -->
    <lst name="spellchecker">
      <str name="name">wordbreak</str>
      <str name="classname">solr.WordBreakSolrSpellChecker</str>
      <str name="field">name</str>
      <str name="combineWords">true</str>
      <str name="breakWords">true</str>
      <int name="maxChanges">10</int>
    </lst>

    <!-- a spellchecker that uses a different distance measure -->
    <!--
       <lst name="spellchecker">
         <str name="name">jarowinkler</str>
         <str name="field">spell</str>
         <str name="classname">solr.DirectSolrSpellChecker</str>
         <str name="distanceMeasure">
           org.apache.lucene.search.spell.JaroWinklerDistance
         </str>
       </lst>
     -->

    <!-- a spellchecker that use an alternate comparator

         comparatorClass be one of:
          1. score (default)
          2. freq (Frequency first, then score)
          3. A fully qualified class name
      -->
    <!--
       <lst name="spellchecker">
         <str name="name">freq</str>
         <str name="field">lowerfilt</str>
         <str name="classname">solr.DirectSolrSpellChecker</str>
         <str name="comparatorClass">freq</str>
      -->

    <!-- A spellchecker that reads the list of words from a file -->
    <!--
       <lst name="spellchecker">
         <str name="classname">solr.FileBasedSpellChecker</str>
         <str name="name">file</str>
         <str name="sourceLocation">spellings.txt</str>
         <str name="characterEncoding">UTF-8</str>
         <str name="spellcheckIndexDir">spellcheckerFile</str>
       </lst>
      -->
  </searchComponent>

  <!-- A request handler for demonstrating the spellcheck component.

       NOTE: This is purely as an example.  The whole purpose of the
       SpellCheckComponent is to hook it into the request handler that
       handles your normal user queries so that a separate request is
       not needed to get suggestions.

       IN OTHER WORDS, THERE IS REALLY GOOD CHANCE THE SETUP BELOW IS
       NOT WHAT YOU WANT FOR YOUR PRODUCTION SYSTEM!

       See http://wiki.apache.org/solr/SpellCheckComponent for details
       on the request parameters.
    -->
  <requestHandler name="/spell" class="solr.SearchHandler" startup="lazy">
    <lst name="defaults">
      <!-- Solr will use suggestions from both the 'default' spellchecker
           and from the 'wordbreak' spellchecker and combine them.
           collations (re-written queries) can include a combination of
           corrections from both spellcheckers -->
      <str name="spellcheck.dictionary">default</str>
      <str name="spellcheck.dictionary">wordbreak</str>
      <str name="spellcheck">on</str>
      <str name="spellcheck.extendedResults">true</str>
      <str name="spellcheck.count">10</str>
      <str name="spellcheck.alternativeTermCount">5</str>
      <str name="spellcheck.maxResultsForSuggest">5</str>
      <str name="spellcheck.collate">true</str>
      <str name="spellcheck.collateExtendedResults">true</str>
      <str name="spellcheck.maxCollationTries">10</str>
      <str name="spellcheck.maxCollations">5</str>
    </lst>
    <arr name="last-components">
      <str>spellcheck</str>
    </arr>
  </requestHandler>

  <!-- Term Vector Component

       http://wiki.apache.org/solr/TermVectorComponent
    -->
  <searchComponent name="tvComponent" class="solr.TermVectorComponent"/>

  <!-- A request handler for demonstrating the term vector component

       This is purely as an example.

       In reality you will likely want to add the component to your
       already specified request handlers.
  <requestHandler name="/tvrh" class="solr.SearchHandler" startup="lazy">
    <lst name="defaults">
      <bool name="tv">true</bool>
    </lst>
    <arr name="last-components">
      <str>tvComponent</str>
    </arr>
  </requestHandler>
-->
  <requestHandler name="/tvrh" class="solr.SearchHandler" startup="lazy">
    <lst name="defaults">
      <bool name="tv">true</bool>
      <bool name="tv.all">true</bool>
      <str name="defType">dismax</str>
      <str name="q.alt">*:*</str>
    </lst>
    <arr name="last-components">
      <str>tvComponent</str>
    </arr>
  </requestHandler>

  <!-- Clustering Component. (Omitted here. See the default Solr example for a typical configuration.) -->

  <!-- Terms Component

       http://wiki.apache.org/solr/TermsComponent

       A component to return terms and document frequency of those
       terms
    -->
  <searchComponent name="terms" class="solr.TermsComponent"/>

  <requestHandler name="/alphaTerms" class="solr.SearchHandler">
    <lst name="defaults">
      <str name="echoParams">explicit</str>
      <bool name="terms">true</bool>
      <bool name="terms.lower.incl">true</bool>
    </lst>
    <arr name="components">
      <str>termsComp</str>
    </arr>
  </requestHandler>

  <!-- A request handler for demonstrating the terms component -->
  <requestHandler name="/terms" class="solr.SearchHandler" startup="lazy">
    <lst name="defaults">
      <bool name="terms">true</bool>
      <bool name="distrib">false</bool>
    </lst>
    <arr name="components">
      <str>terms</str>
    </arr>
  </requestHandler>

  <!-- basic defType=lucene request handler -->
  <requestHandler name="standard" class="solr.SearchHandler" >
    <lst name="defaults">
      <str name="defType">lucene</str>
      <str name="echoParams">explicit</str>
      <str name="df">all_search</str>
      <str name="q.op">AND</str>
      <str name="sort">score desc, pub_date_sort desc, title_sort asc</str>
      <int name="facet.mincount">1</int>
    </lst>
  </requestHandler>

  <!-- Query Elevation Component

       http://wiki.apache.org/solr/QueryElevationComponent

       a search component that enables you to configure the top
       results for a given query regardless of the normal lucene
       scoring.
    -->
  <searchComponent name="elevator" class="solr.QueryElevationComponent" >
    <!-- pick a fieldType to analyze queries -->
    <str name="queryFieldType">string</str>
    <str name="config-file">elevate.xml</str>
  </searchComponent>

  <!-- A request handler for demonstrating the elevator component -->
  <requestHandler name="/elevate" class="solr.SearchHandler" startup="lazy">
    <lst name="defaults">
      <str name="echoParams">explicit</str>
    </lst>
    <arr name="last-components">
      <str>elevator</str>
    </arr>
  </requestHandler>

  <!-- Highlighting Component

       http://wiki.apache.org/solr/HighlightingParameters
    -->
  <searchComponent class="solr.HighlightComponent" name="highlight">
    <highlighting>
      <!-- Configure the standard fragmenter -->
      <!-- This could most likely be commented out in the "default" case -->
      <fragmenter name="gap"
                  default="true"
                  class="solr.highlight.GapFragmenter">
        <lst name="defaults">
          <int name="hl.fragsize">100</int>
        </lst>
      </fragmenter>

      <!-- A regular-expression-based fragmenter
           (for sentence extraction)
        -->
      <fragmenter name="regex"
                  class="solr.highlight.RegexFragmenter">
        <lst name="defaults">
          <!-- slightly smaller fragsizes work better because of slop -->
          <int name="hl.fragsize">70</int>
          <!-- allow 50% slop on fragment sizes -->
          <float name="hl.regex.slop">0.5</float>
          <!-- a basic sentence pattern -->
          <str name="hl.regex.pattern">[-\w ,/\n\&quot;&apos;]{20,200}</str>
        </lst>
      </fragmenter>

      <!-- Configure the standard formatter -->
      <formatter name="html"
                 default="true"
                 class="solr.highlight.HtmlFormatter">
        <lst name="defaults">
          <str name="hl.simple.pre"><![CDATA[<em>]]></str>
          <str name="hl.simple.post"><![CDATA[</em>]]></str>
        </lst>
      </formatter>

      <!-- Configure the standard encoder -->
      <encoder name="html"
               class="solr.highlight.HtmlEncoder" />

      <!-- Configure the standard fragListBuilder -->
      <fragListBuilder name="simple"
                       class="solr.highlight.SimpleFragListBuilder"/>

      <!-- Configure the single fragListBuilder -->
      <fragListBuilder name="single"
                       class="solr.highlight.SingleFragListBuilder"/>

      <!-- Configure the weighted fragListBuilder -->
      <fragListBuilder name="weighted"
                       default="true"
                       class="solr.highlight.WeightedFragListBuilder"/>

      <!-- default tag FragmentsBuilder -->
      <fragmentsBuilder name="default"
                        default="true"
                        class="solr.highlight.ScoreOrderFragmentsBuilder">
        <!--
        <lst name="defaults">
          <str name="hl.multiValuedSeparatorChar">/</str>
        </lst>
        -->
      </fragmentsBuilder>

      <!-- multi-colored tag FragmentsBuilder -->
      <fragmentsBuilder name="colored"
                        class="solr.highlight.ScoreOrderFragmentsBuilder">
        <lst name="defaults">
          <str name="hl.tag.pre"><![CDATA[
               <b style="background:yellow">,<b style="background:lawgreen">,
               <b style="background:aquamarine">,<b style="background:magenta">,
               <b style="background:palegreen">,<b style="background:coral">,
               <b style="background:wheat">,<b style="background:khaki">,
               <b style="background:lime">,<b style="background:deepskyblue">]]></str>
          <str name="hl.tag.post"><![CDATA[</b>]]></str>
        </lst>
      </fragmentsBuilder>

      <boundaryScanner name="default"
                       default="true"
                       class="solr.highlight.SimpleBoundaryScanner">
        <lst name="defaults">
          <str name="hl.bs.maxScan">10</str>
          <str name="hl.bs.chars">.,!? &#9;&#10;&#13;</str>
        </lst>
      </boundaryScanner>

      <boundaryScanner name="breakIterator"
                       class="solr.highlight.BreakIteratorBoundaryScanner">
        <lst name="defaults">
          <!-- type should be one of CHARACTER, WORD(default), LINE and SENTENCE -->
          <str name="hl.bs.type">WORD</str>
          <!-- language and country are used when constructing Locale object.  -->
          <!-- And the Locale object will be used when getting instance of BreakIterator -->
          <str name="hl.bs.language">en</str>
          <str name="hl.bs.country">US</str>
        </lst>
      </boundaryScanner>
    </highlighting>
  </searchComponent>

  <!-- Update Processors

       Chains of Update Processor Factories for dealing with Update
       Requests can be declared, and then used by name in Update
       Request Processors

       http://wiki.apache.org/solr/UpdateRequestProcessor

    -->

  <!-- Add unknown fields to the schema

       An example field type guessing update processor that will
       attempt to parse string-typed field values as Booleans, Longs,
       Doubles, or Dates, and then add schema fields with the guessed
       field types.

       This requires that the schema is both managed and mutable, by
       declaring schemaFactory as ManagedIndexSchemaFactory, with
       mutable specified as true.

       See http://wiki.apache.org/solr/GuessingFieldTypes
    -->
  <updateRequestProcessorChain name="files-update-processor">
    <!-- UUIDUpdateProcessorFactory will generate an id if none is present in the incoming document -->
    <processor class="solr.UUIDUpdateProcessorFactory" />

    <processor class="solr.LogUpdateProcessorFactory"/>
    <processor class="solr.DistributedUpdateProcessorFactory"/>
    <processor class="solr.RemoveBlankFieldUpdateProcessorFactory"/>
    <processor class="solr.FieldNameMutatingUpdateProcessorFactory">
      <str name="pattern">[^\w-\.]</str>
      <str name="replacement">_</str>
    </processor>
    <processor class="solr.ParseBooleanFieldUpdateProcessorFactory"/>
    <processor class="solr.ParseLongFieldUpdateProcessorFactory"/>
    <processor class="solr.ParseDoubleFieldUpdateProcessorFactory"/>
    <processor class="solr.ParseDateFieldUpdateProcessorFactory">
      <arr name="format">
        <str>yyyy-MM-dd'T'HH:mm:ss.SSSZ</str>
        <str>yyyy-MM-dd'T'HH:mm:ss,SSSZ</str>
        <str>yyyy-MM-dd'T'HH:mm:ss.SSS</str>
        <str>yyyy-MM-dd'T'HH:mm:ss,SSS</str>
        <str>yyyy-MM-dd'T'HH:mm:ssZ</str>
        <str>yyyy-MM-dd'T'HH:mm:ss</str>
        <str>yyyy-MM-dd'T'HH:mmZ</str>
        <str>yyyy-MM-dd'T'HH:mm</str>
        <str>yyyy-MM-dd HH:mm:ss.SSSZ</str>
        <str>yyyy-MM-dd HH:mm:ss,SSSZ</str>
        <str>yyyy-MM-dd HH:mm:ss.SSS</str>
        <str>yyyy-MM-dd HH:mm:ss,SSS</str>
        <str>yyyy-MM-dd HH:mm:ssZ</str>
        <str>yyyy-MM-dd HH:mm:ss</str>
        <str>yyyy-MM-dd HH:mmZ</str>
        <str>yyyy-MM-dd HH:mm</str>
        <str>yyyy-MM-dd</str>
      </arr>
    </processor>
    <processor class="solr.AddSchemaFieldsUpdateProcessorFactory">
      <str name="defaultFieldType">strings</str>
      <lst name="typeMapping">
        <str name="valueClass">java.lang.Boolean</str>
        <str name="fieldType">booleans</str>
      </lst>
      <lst name="typeMapping">
        <str name="valueClass">java.util.Date</str>
        <str name="fieldType">tdates</str>
      </lst>
      <lst name="typeMapping">
        <str name="valueClass">java.lang.Long</str>
        <str name="valueClass">java.lang.Integer</str>
        <str name="fieldType">tlongs</str>
      </lst>
      <lst name="typeMapping">
        <str name="valueClass">java.lang.Number</str>
        <str name="fieldType">tdoubles</str>
      </lst>
    </processor>


    <processor class="org.apache.solr.update.processor.LangDetectLanguageIdentifierUpdateProcessorFactory">
      <lst name="defaults">
        <str name="langid.fl">content</str>
        <str name="langid.langField">language</str>
      </lst>
    </processor>

    <processor class="solr.StatelessScriptUpdateProcessorFactory">
      <str name="script">update-script.js</str>
      <!--<lst name="params">-->
        <!--<str name="config_param">example config parameter</str>-->
      <!--</lst>-->
    </processor>

    <processor class="solr.RunUpdateProcessorFactory"/>
  </updateRequestProcessorChain>

  <!-- Deduplication

       An example dedup update processor that creates the "id" field
       on the fly based on the hash code of some other fields.  This
       example has overwriteDupes set to false since we are using the
       id field as the signatureField and Solr will maintain
       uniqueness based on that anyway.

    -->
  <!--
     <updateRequestProcessorChain name="dedupe">
       <processor class="solr.processor.SignatureUpdateProcessorFactory">
         <bool name="enabled">true</bool>
         <str name="signatureField">id</str>
         <bool name="overwriteDupes">false</bool>
         <str name="fields">name,features,cat</str>
         <str name="signatureClass">solr.processor.Lookup3Signature</str>
       </processor>
       <processor class="solr.LogUpdateProcessorFactory" />
       <processor class="solr.RunUpdateProcessorFactory" />
     </updateRequestProcessorChain>
    -->

  <!-- Language identification

       This example update chain identifies the language of the incoming
       documents using the langid contrib. The detected language is
       written to field language_s. No field name mapping is done.
       The fields used for detection are text, title, subject and description,
       making this example suitable for detecting languages form full-text
       rich documents injected via ExtractingRequestHandler.
       See more about langId at http://wiki.apache.org/solr/LanguageDetection
    -->
  <!--
   <updateRequestProcessorChain name="langid">
     <processor class="org.apache.solr.update.processor.TikaLanguageIdentifierUpdateProcessorFactory">
       <str name="langid.fl">text,title,subject,description</str>
       <str name="langid.langField">language_s</str>
       <str name="langid.fallback">en</str>
     </processor>
     <processor class="solr.LogUpdateProcessorFactory" />
     <processor class="solr.RunUpdateProcessorFactory" />
   </updateRequestProcessorChain>
  -->

  <!-- Script update processor

    This example hooks in an update processor implemented using JavaScript.

    See more about the script update processor at http://wiki.apache.org/solr/ScriptUpdateProcessor
  -->
  <!--
    <updateRequestProcessorChain name="script">
      <processor class="solr.StatelessScriptUpdateProcessorFactory">
        <str name="script">update-script.js</str>
        <lst name="params">
          <str name="config_param">example config parameter</str>
        </lst>
      </processor>
      <processor class="solr.RunUpdateProcessorFactory" />
    </updateRequestProcessorChain>
  -->

  <!-- Response Writers

       http://wiki.apache.org/solr/QueryResponseWriter

       Request responses will be written using the writer specified by
       the 'wt' request parameter matching the name of a registered
       writer.

       The "default" writer is the default and will be used if 'wt' is
       not specified in the request.
    -->
  <!-- The following response writers are implicitly configured unless
       overridden...
    -->
  <!--
     <queryResponseWriter name="xml"
                          default="true"
                          class="solr.XMLResponseWriter" />
     <queryResponseWriter name="json" class="solr.JSONResponseWriter"/>
     <queryResponseWriter name="python" class="solr.PythonResponseWriter"/>
     <queryResponseWriter name="ruby" class="solr.RubyResponseWriter"/>
     <queryResponseWriter name="php" class="solr.PHPResponseWriter"/>
     <queryResponseWriter name="phps" class="solr.PHPSerializedResponseWriter"/>
     <queryResponseWriter name="csv" class="solr.CSVResponseWriter"/>
     <queryResponseWriter name="schema.xml" class="solr.SchemaXmlResponseWriter"/>
    -->

  <queryResponseWriter name="json" class="solr.JSONResponseWriter">
    <!-- For the purposes of the tutorial, JSON responses are written as
     plain text so that they are easy to read in *any* browser.
     If you expect a MIME type of "application/json" just remove this override.
    -->
    <str name="content-type">text/plain; charset=UTF-8</str>
  </queryResponseWriter>

  <!--
     Custom response writers can be declared as needed...
    -->
  <queryResponseWriter name="velocity" class="solr.VelocityResponseWriter" startup="lazy">
    <str name="template.base.dir">${velocity.template.base.dir:}</str>
  </queryResponseWriter>

  <!-- XSLT response writer transforms the XML output by any xslt file found
       in Solr's conf/xslt directory.  Changes to xslt files are checked for
       every xsltCacheLifetimeSeconds.
    -->
  <queryResponseWriter name="xslt" class="solr.XSLTResponseWriter">
    <int name="xsltCacheLifetimeSeconds">5</int>
  </queryResponseWriter>

  <!-- Query Parsers

       https://cwiki.apache.org/confluence/display/solr/Query+Syntax+and+Parsing

       Multiple QParserPlugins can be registered by name, and then
       used in either the "defType" param for the QueryComponent (used
       by SearchHandler) or in LocalParams
    -->
  <!-- example of registering a query parser -->
  <!--
     <queryParser name="myparser" class="com.mycompany.MyQParserPlugin"/>
    -->

  <!-- Function Parsers

       http://wiki.apache.org/solr/FunctionQuery

       Multiple ValueSourceParsers can be registered by name, and then
       used as function names when using the "func" QParser.
    -->
  <!-- example of registering a custom function parser  -->
  <!--
     <valueSourceParser name="myfunc"
                        class="com.mycompany.MyValueSourceParser" />
    -->


  <!-- Document Transformers
       http://wiki.apache.org/solr/DocTransformers
    -->
  <!--
     Could be something like:
     <transformer name="db" class="com.mycompany.LoadFromDatabaseTransformer" >
       <int name="connection">jdbc://....</int>
     </transformer>

     To add a constant value to all docs, use:
     <transformer name="mytrans2" class="org.apache.solr.response.transform.ValueAugmenterFactory" >
       <int name="value">5</int>
     </transformer>

     If you want the user to still be able to change it with _value:something_ use this:
     <transformer name="mytrans3" class="org.apache.solr.response.transform.ValueAugmenterFactory" >
       <double name="defaultValue">5</double>
     </transformer>

      If you are using the QueryElevationComponent, you may wish to mark documents that get boosted.  The
      EditorialMarkerFactory will do exactly that:
     <transformer name="qecBooster" class="org.apache.solr.response.transform.EditorialMarkerFactory" />
    -->

</config>
