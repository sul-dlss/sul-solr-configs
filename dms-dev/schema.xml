<?xml version="1.0" encoding="UTF-8" ?>
<schema name="dmss" version="1.5">

 <fields>
 
   <!-- Valid attributes for fields:
     name: mandatory - the name for the field
     type: mandatory - the name of a previously defined type from the <types> section
     indexed: true if this field should be indexed (searchable or sortable)
     stored: true if this field should be retrievable
     compressed: [false] if this field should be stored using gzip compression
       (this will only apply if the field type is compressable; among
       the standard field types, only TextField and StrField are)
     multiValued: true if this field may contain multiple values per document
     omitNorms: (expert) set to true to omit the norms associated with
       this field (this disables length normalization and index-time
       boosting for the field, and saves some memory).  Only full-text
       fields or fields that need an index-time boost need norms.
     termVectors: [false] set to true to store the term vector for a given field.
       When using MoreLikeThis, fields used for similarity should be stored for 
       best performance. -->

   <!-- field to uniquely identify all documents -->
   <field name="id" type="string" indexed="true" stored="true" required="true" /> 

    <field name="_version_" type="long"     indexed="true"  stored="true"/>
   <!-- field to group common documents into a single search result -->

   <field name="collection_id" type="string" indexed="true" stored="true" multiValued="false" /> 

   <!-- catchall field, containing all other searchable text fields (implemented via copyField further on in this schema) -->
   <field name="keywords" type="text" indexed="true" stored="false" multiValued="true" />

   <!-- Here, default is used to create a "timestamp" field indicating when each document was indexed. -->
   <field name="timestamp" type="date" indexed="true" stored="true" default="NOW" multiValued="false" />
   
   <!-- Dynamic field definitions.  If a field name is not found, dynamicFields
        will be used if the name matches any of the patterns.
        RESTRICTION: the glob-like pattern in the name attribute must have
        a "*" only at the start or the end.
        EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
        Longer patterns will be matched first.  if equal size patterns
        both match, the first appearing in the schema will be used.  -->

   <!-- Dynamic field definition used to create browsable and searchable fields -->
   <dynamicField name="*_search" type="text" indexed="true" stored="false" multiValued="true" />

   <!-- Dynamic field definition used to create sort fields -->
   <dynamicField name="*_sort" type="string" indexed="true" stored="false" multiValued="true" />

   <!-- Dynamic field definition used to create facet fields -->
   <dynamicField name="*_facet" type="string" indexed="true" stored="false" multiValued="true" />

   <!-- Dynamic field definition used to create fields solely for display purposes -->
   <dynamicField name="*_display" type="string" indexed="false" stored="true" multiValued="true" />

   <!-- Dynamic field definition used to create fields containing content-level terms to support searches across content-level fields -->

   <dynamicField name="*_terms" type="string" indexed="true" stored="false" multiValued="true" />

   <!-- Dynamic field definition used to store multiple urls to remote repositories -->
   <dynamicField name="*_url" type="string" indexed="false" stored="true" multiValued="true" />

   <!-- Default dynamic field definitions used only as a last resort if no other dynamic field definitions match -->      
   <dynamicField name="*_i"  type="tint"    indexed="true"  stored="true" />
   <dynamicField name="*_s"  type="string"  indexed="true"  stored="true" />
   <dynamicField name="*_l"  type="tlong"   indexed="true"  stored="true" />
   <dynamicField name="*_t"  type="text"    indexed="true"  stored="true" />

   <dynamicField name="*_b"  type="boolean" indexed="true"  stored="true" />
   <dynamicField name="*_f"  type="tfloat"  indexed="true"  stored="true" />
   <dynamicField name="*_d"  type="tdouble" indexed="true"  stored="true" />
   <dynamicField name="*_dt" type="date"    indexed="true"  stored="true" />

   <!-- uncomment the following to ignore any fields that don't already match an existing 
        field name or dynamic field, rather than reporting them as an error. 
        alternately, change the type="ignored" to some other type e.g. "text" if you want 
        unknown fields indexed and/or stored by default --> 
   <!--dynamicField name="*" type="ignored" /-->
   
 </fields>

 <!-- Field to use to determine and enforce document uniqueness. 
      Unless this field is marked with required="false", it will be a required field -->
 <uniqueKey>id</uniqueKey>

 <!-- field for the QueryParser to use when an explicit fieldname is absent -->
 <defaultSearchField>keywords</defaultSearchField>

 <!-- copyField commands copy one field to another at the time a document
      is added to the index.  It's used either to index the same field differently,
      or to add multiple fields to the same field for easier/faster searching.  -->
 <!-- <copyField source="" dest="" /> -->

 <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
 <solrQueryParser defaultOperator="AND" />

 <!-- Similarity is the scoring routine for each document vs. a query.
      A custom similarity may be specified here, but the default is fine
      for most applications.  -->
 <!-- <similarity class="org.apache.lucene.search.DefaultSimilarity"/> -->
 <!-- ... OR ...
      Specify a SimilarityFactory class name implementation
      allowing parameters to be used.
 -->
 <!--
 <similarity class="com.example.solr.CustomSimilarityFactory">
   <str name="paramkey">param value</str>
 </similarity>
 -->
 <types>
    <fieldType name="string" class="solr.StrField" sortMissingLast="true" />
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>    
    <fieldType name="rand" class="solr.RandomSortField" omitNorms="true"/>
    
    <!-- Default numeric field types.  -->
    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0"/>
    
    <!-- trie numeric field types for faster range queries -->
    <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0"/>
    
    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
      -->
    <fieldType name="date" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0"/>
    <!-- A Trie based date field for faster date range queries and date faceting. -->
    <fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0"/>
    
    
    <!-- This point type indexes the coordinates as separate fields (subFields)
      If subFieldType is defined, it references a type, and a dynamic field
      definition is created matching *___<typename>.  Alternately, if 
      subFieldSuffix is defined, that is used to create the subFields.
      Example: if subFieldType="double", then the coordinates would be
        indexed in fields myloc_0___double,myloc_1___double.
      Example: if subFieldSuffix="_d" then the coordinates would be indexed
        in fields myloc_0_d,myloc_1_d
      The subFields are an implementation detail of the fieldType, and end
      users normally should not need to know about them.
     -->
    <fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d"/>
    
    <!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
    <fieldType name="location" class="solr.LatLonType" subFieldSuffix="_coordinate"/>
    
    <!-- An alternative geospatial field type new to Solr 4.  It supports multiValued and polygon shapes.
      For more information about this and other Spatial fields new to Solr 4, see:
      http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4
    -->
    <fieldType name="location_rpt" class="solr.SpatialRecursivePrefixTreeFieldType"
      geo="true" distErrPct="0.025" maxDistErr="0.000009" distanceUnits="degrees" />
    
    <fieldType name="text" class="solr.TextField" omitNorms="false">
      <analyzer>
        <tokenizer class="solr.ICUTokenizerFactory"/>
        <filter class="solr.ICUFoldingFilterFactory"/>  <!-- NFKC, case folding, diacritics removed -->
      </analyzer>
    </fieldType>
    
    <!-- A text field that only splits on whitespace for exact matching of words -->
    <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      </analyzer>
    </fieldType>
        
    <!-- single token analyzed text, for sorting.  Punctuation is significant. -->
    <fieldtype name="alphaSort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory" />
        <filter class="solr.ICUFoldingFilterFactory"/>
        <filter class="solr.TrimFilterFactory" />
      </analyzer>
    </fieldtype>
    
    <!-- A text field with defaults appropriate for English -->
    <fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
        <tokenizer class="solr.ICUTokenizerFactory"/>
        <filter class="solr.ICUFoldingFilterFactory"/>  <!-- NFKC, case folding, diacritics removed -->
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory: -->
        <filter class="solr.EnglishMinimalStemFilterFactory"/>
        <!--
        <filter class="solr.PorterStemFilterFactory"/>
        -->
      </analyzer>
    </fieldType>
        
  </types>

</schema>
